"use strict";
/**
 * @fileoverview Check for protocol relative URLs.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * ------------------------------------------------------------------------------
 * Requirements
 * ------------------------------------------------------------------------------
 */
const utils_debug_1 = require("@hint/utils-debug");
const utils_string_1 = require("@hint/utils-string");
const utils_types_1 = require("@hint/utils-types");
const utils_network_1 = require("@hint/utils-network");
const meta_1 = require("./meta");
const i18n_import_1 = require("./i18n.import");
const debug = utils_debug_1.debug(__filename);
/*
 * ------------------------------------------------------------------------------
 * Public
 * ------------------------------------------------------------------------------
 */
class NoProtocolRelativeUrlsHint {
    constructor(context) {
        const validate = ({ element, resource }) => {
            if (debug.enabled) {
                const html = element.outerHTML;
                debug(`Analyzing link\n${utils_string_1.cutString(html, 50)}`);
            }
            /*
             * We need to use getAttribute to get the exact value.
             * If we access the src or href properties directly the
             * browser already adds http(s):// so we cannot verify.
             */
            const url = (element.getAttribute('src') || element.getAttribute('href') || '').trim();
            if (url.startsWith('//')) {
                debug('Protocol relative URL found');
                const message = i18n_import_1.getMessage('noProtocolRelativeUrl', context.language, url);
                const severity = utils_network_1.isHTTPS(resource) ?
                    utils_types_1.Severity.hint :
                    utils_types_1.Severity.warning;
                context.report(resource, message, {
                    content: url,
                    element,
                    severity
                });
            }
        };
        context.on('element::a', validate);
        context.on('element::link', validate);
        context.on('element::script', validate);
    }
}
exports.default = NoProtocolRelativeUrlsHint;
NoProtocolRelativeUrlsHint.meta = meta_1.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGludC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oaW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7QUFFSDs7OztHQUlHO0FBRUgsbURBQStDO0FBQy9DLHFEQUErQztBQUcvQyxtREFBNkM7QUFDN0MsdURBQThDO0FBRTlDLGlDQUEwQjtBQUMxQiwrQ0FBMkM7QUFFM0MsTUFBTSxLQUFLLEdBQUcsbUJBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUU1Qjs7OztHQUlHO0FBRUgsTUFBcUIsMEJBQTBCO0lBSTNDLFlBQW1CLE9BQW9CO1FBRW5DLE1BQU0sUUFBUSxHQUFHLENBQUMsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFnQixFQUFFLEVBQUU7WUFDckQsSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFO2dCQUNmLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7Z0JBRS9CLEtBQUssQ0FBQyxtQkFBbUIsd0JBQVMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQ25EO1lBRUQ7Ozs7ZUFJRztZQUVILE1BQU0sR0FBRyxHQUFXLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxPQUFPLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1lBRS9GLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDdEIsS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7Z0JBRXJDLE1BQU0sT0FBTyxHQUFHLHdCQUFVLENBQUMsdUJBQXVCLEVBQUUsT0FBTyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFFM0UsTUFBTSxRQUFRLEdBQUcsdUJBQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO29CQUNoQyxzQkFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUNmLHNCQUFRLENBQUMsT0FBTyxDQUFDO2dCQUVyQixPQUFPLENBQUMsTUFBTSxDQUNWLFFBQVEsRUFDUixPQUFPLEVBQ1A7b0JBQ0ksT0FBTyxFQUFFLEdBQUc7b0JBQ1osT0FBTztvQkFDUCxRQUFRO2lCQUNYLENBQUMsQ0FBQzthQUNWO1FBQ0wsQ0FBQyxDQUFDO1FBRUYsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDbkMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxlQUFlLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDdEMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUM1QyxDQUFDOztBQTVDTCw2Q0E2Q0M7QUEzQzBCLCtCQUFJLEdBQUcsY0FBSSxDQUFDIn0=