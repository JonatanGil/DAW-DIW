"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const cloneDeep = require("lodash/cloneDeep");
const hint_1 = require("hint");
const utils_json_1 = require("@hint/utils-json");
const utils_fs_1 = require("@hint/utils-fs");
class BabelConfigParser extends hint_1.Parser {
    constructor(engine) {
        super(engine, 'babel-config');
        this.schema = utils_fs_1.loadJSONFile(path.join(__dirname, 'schema.json'));
        /**
         * package.json => type: 'json' (file type from extention).
         */
        engine.on('fetch::end::json', this.parseBabelConfig.bind(this));
    }
    async validateSchema(config, resource, result) {
        const validationResult = utils_json_1.validate(this.schema, config, result.getLocation);
        const valid = validationResult.valid;
        if (!valid) {
            await this.engine.emitAsync('parse::error::babel-config::schema', {
                error: new Error('Invalid Babel configuration'),
                errors: validationResult.errors,
                groupedErrors: validationResult.groupedErrors,
                prettifiedErrors: validationResult.prettifiedErrors,
                resource
            });
        }
        return validationResult;
    }
    async parseBabelConfig(fetchEnd) {
        const resource = fetchEnd.resource;
        const resourceFileName = path.basename(resource);
        const isPackageJson = resourceFileName === 'package.json';
        const isBabelrc = resourceFileName === '.babelrc';
        if (!isBabelrc && !isPackageJson) {
            return;
        }
        let config;
        try {
            const response = fetchEnd.response;
            // When using local connector to read local files, 'content' is empty.
            let result = utils_json_1.parseJSON(response.body.content, 'extends');
            if (isPackageJson && !result.data.babel) {
                return;
            }
            await this.engine.emitAsync('parse::start::babel-config', { resource });
            // `result.scope('babel')` won't be null since `result.data.babel` was confirmed to exist above.
            result = isPackageJson ? result.scope('babel') : result;
            config = result.data;
            const originalConfig = cloneDeep(config);
            const finalConfig = utils_json_1.finalConfig(config, resource);
            if (finalConfig instanceof Error) {
                await this.engine.emitAsync(`parse::error::babel-config::extends`, {
                    error: finalConfig,
                    getLocation: result.getLocation,
                    resource
                });
                return;
            }
            if (!finalConfig) {
                return;
            }
            config = finalConfig;
            const validationResult = await this.validateSchema(config, resource, result);
            if (!validationResult.valid) {
                return;
            }
            await this.engine.emitAsync('parse::end::babel-config', {
                config: validationResult.data,
                getLocation: result.getLocation,
                originalConfig,
                resource
            });
        }
        catch (err) {
            await this.engine.emitAsync('parse::error::babel-config::json', {
                error: err,
                resource
            });
        }
    }
}
exports.default = BabelConfigParser;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3BhcnNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUE2QjtBQUU3Qiw4Q0FBK0M7QUFFL0MsK0JBQWdEO0FBQ2hELGlEQU0wQjtBQUMxQiw2Q0FBOEM7QUFNOUMsTUFBcUIsaUJBQWtCLFNBQVEsYUFBeUI7SUFHcEUsWUFBbUIsTUFBaUM7UUFDaEQsS0FBSyxDQUFDLE1BQU0sRUFBRSxjQUFjLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsTUFBTSxHQUFHLHVCQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUVoRTs7V0FFRztRQUNILE1BQU0sQ0FBQyxFQUFFLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFTyxLQUFLLENBQUMsY0FBYyxDQUFDLE1BQW1CLEVBQUUsUUFBZ0IsRUFBRSxNQUFtQjtRQUNuRixNQUFNLGdCQUFnQixHQUFHLHFCQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRTNFLE1BQU0sS0FBSyxHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQztRQUVyQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1IsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxvQ0FBb0MsRUFBRTtnQkFDOUQsS0FBSyxFQUFFLElBQUksS0FBSyxDQUFDLDZCQUE2QixDQUFDO2dCQUMvQyxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsTUFBTTtnQkFDL0IsYUFBYSxFQUFFLGdCQUFnQixDQUFDLGFBQWE7Z0JBQzdDLGdCQUFnQixFQUFFLGdCQUFnQixDQUFDLGdCQUFnQjtnQkFDbkQsUUFBUTthQUNYLENBQUMsQ0FBQztT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