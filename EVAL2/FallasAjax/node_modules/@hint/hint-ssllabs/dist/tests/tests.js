"use strict";
/* eslint sort-keys: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
const mock = require("mock-require");
const utils_tests_helpers_1 = require("@hint/utils-tests-helpers");
const utils_types_1 = require("@hint/utils-types");
const hintPath = utils_tests_helpers_1.getHintPath(__filename);
const ssllabsMock = (response) => {
    const mockedModule = {
        // Original node-ssllabs uses callback and we promisify in the hint
        scan: (options, callback) => {
            if (response === null) {
                return callback('Error');
            }
            return callback(null, response);
        }
    };
    mock('node-ssllabs', mockedModule);
};
const results = {
    aplussite: { endpoints: [{ grade: 'A+' }] },
    asite: {
        endpoints: [{ grade: 'A' }, {
                grade: 'A',
                serverName: 'a-site.net'
            }]
    },
    nohttps: { endpoints: [{ details: { protocols: [] } }] }
};
const testsForDefaults = [
    {
        name: `Site with with A+ grade passes`,
        serverUrl: 'https://example.com',
        before() {
            ssllabsMock(results.aplussite);
        }
    },
    {
        name: `Site A grade passes`,
        serverUrl: 'https://example.com',
        before() {
            ssllabsMock(results.asite);
        }
    },
    {
        name: `Domain without HTTPS fails with default configuration`,
        reports: [{
                message: `'http://example.com/' does not support HTTPS.`,
                severity: utils_types_1.Severity.error
            }],
        serverUrl: 'http://example.com',
        before() {
            ssllabsMock(results.nohttps);
        }
    },
    {
        name: `Resource is not an HTML document`,
        serverConfig: { '/': { headers: { 'Content-Type': 'image/png' } } }
    }
];
const testsForConfigs = [
    {
        name: `Site with A+ grade passes with A+ minimum`,
        serverUrl: 'https://example.com',
        before() {
            ssllabsMock(results.aplussite);
        }
    },
    {
        name: `Site with A grade doesn't pass with A+ minimum`,
        reports: [
            {
                message: `https://example.com/'s grade A does not meet the minimum A+ required.`,
                severity: utils_types_1.Severity.error
            },
            {
                message: `a-site.net's grade A does not meet the minimum A+ required.`,
                severity: utils_types_1.Severity.error
            }
        ],
        serverUrl: 'https://example.com',
        before() {
            ssllabsMock(results.asite);
        }
    },
    {
        name: `Domain without HTTPS fails with a custom configuration`,
        reports: [{
                message: `'http://example.com/' does not support HTTPS.`,
                severity: utils_types_1.Severity.error
            }],
        serverUrl: 'http://example.com',
        before() {
            ssllabsMock(results.nohttps);
        }
    }
];
const testsForErrors = [
    {
        name: 'Issue gettings results from SSL Labs reports error',
        reports: [{
                message: `Could not get results from SSL Labs for 'https://example.com/'.`,
                severity: utils_types_1.Severity.warning
            }],
        serverUrl: 'https://example.com',
        before() {
            ssllabsMock(null);
        }
    },
    {
        name: 'Missing endpoints reports an error',
        reports: [{
                message: `Didn't get any result for https://example.com/.
There might be something wrong with SSL Labs servers.`,
                severity: utils_types_1.Severity.warning
            }],
        serverUrl: 'https://example.com',
        before() {
            ssllabsMock({});
        }
    },
    {
        name: 'Empty endpoints array reports an error',
        reports: [{
                message: `Didn't get any result for https://example.com/.
There might be something wrong with SSL Labs servers.`,
                severity: utils_types_1.Severity.warning
            }],
        serverUrl: 'https://example.com',
        before() {
            ssllabsMock({ endpoints: [] });
        }
    },
    {
        name: 'Response with right status code but nothing inside reports an error',
        reports: [{
                message: `Didn't get any result for https://example.com/.
There might be something wrong with SSL Labs servers.`,
                severity: utils_types_1.Severity.warning
            }],
        serverUrl: 'https://example.com',
        before() {
            ssllabsMock(undefined);
        }
    }
];
utils_tests_helpers_1.testHint(hintPath, testsForDefaults, { serial: true });
utils_tests_helpers_1.testHint(hintPath, testsForConfigs, {
    hintOptions: { grade: 'A+' },
    serial: true
});
utils_tests_helpers_1.testHint(hintPath, testsForErrors, { serial: true });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi90ZXN0cy90ZXN0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEseUJBQXlCOztBQUV6QixxQ0FBcUM7QUFFckMsbUVBQTRFO0FBQzVFLG1EQUE2QztBQUU3QyxNQUFNLFFBQVEsR0FBRyxpQ0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBRXpDLE1BQU0sV0FBVyxHQUFHLENBQUMsUUFBYSxFQUFFLEVBQUU7SUFDbEMsTUFBTSxZQUFZLEdBQUc7UUFDakIsbUVBQW1FO1FBQ25FLElBQUksRUFBRSxDQUFDLE9BQVksRUFBRSxRQUFrQixFQUFFLEVBQUU7WUFDdkMsSUFBSSxRQUFRLEtBQUssSUFBSSxFQUFFO2dCQUNuQixPQUFPLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUM1QjtZQUVELE9BQU8sUUFBUSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNwQyxDQUFDO0tBQ0osQ0FBQztJQUVGLElBQUksQ0FBQyxjQUFjLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDdkMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxPQUFPLEdBQUc7SUFDWixTQUFTLEVBQUUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFO0lBQzNDLEtBQUssRUFBRTtRQUNILFNBQVMsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFO2dCQUN4QixLQUFLLEVBQUUsR0FBRztnQkFDVixVQUFVLEVBQUUsWUFBWTthQUMzQixDQUFDO0tBQ0w7SUFDRCxPQUFPLEVBQUUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUU7Q0FDM0QsQ0FBQztBQUVGLE1BQU0sZ0JBQWdCLEdBQWU7SUFDakM7UUFDSSxJQUFJLEVBQUUsZ0NBQWdDO1FBQ3RDLFNBQVMs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