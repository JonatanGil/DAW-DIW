"use strict";
/**
 * @fileoverview Checks how secure the SSL configuration is for the given target
 * using SSL Labs online tool.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * ------------------------------------------------------------------------------
 * Requirements
 * ------------------------------------------------------------------------------
 */
// HACK: Needed here because with TS `eslint-disable-line` doesn't work fine.
const util_1 = require("util");
const utils_debug_1 = require("@hint/utils-debug");
const utils_types_1 = require("@hint/utils-types");
const types_1 = require("./types");
const meta_1 = require("./meta");
const i18n_import_1 = require("./i18n.import");
const debug = utils_debug_1.debug(__filename);
/*
 * ------------------------------------------------------------------------------
 * Public
 * ------------------------------------------------------------------------------
 */
class SSLLabsHint {
    constructor(context) {
        /** The promise that represents the scan by SSL Labs. */
        let promise;
        /** The minimum grade required to pass. */
        let minimumGrade = 'A-';
        /** The options to pass to the SSL Labs scanner. */
        let scanOptions = {
            all: 'done',
            fromCache: true,
            host: '',
            maxAge: 2
        };
        /** Error processing the request if any. */
        let failed = false;
        const loadHintConfig = () => {
            minimumGrade = (context.hintOptions && context.hintOptions.grade) || 'A-';
            const userSslOptions = (context.hintOptions && context.hintOptions.ssllabs) || {};
            scanOptions = Object.assign(scanOptions, userSslOptions);
        };
        const verifyEndpoint = (resource, { grade, serverName = resource, details }) => {
            if (!grade && details.protocols.length === 0) {
                const message = i18n_import_1.getMessage('doesNotSupportHTTPS', context.language, resource);
                debug(message);
                context.report(resource, message, { severity: utils_types_1.Severity.error });
                return;
            }
            const calculatedGrade = types_1.Grades[grade];
            const calculatedMiniumGrade = types_1.Grades[minimumGrade];
            if (calculatedGrade > calculatedMiniumGrade) {
                const message = i18n_import_1.getMessage('gradeNotMeetTheMinimum', context.language, [serverName, grade, minimumGrade]);
                debug(message);
                context.report(resource, message, { severity: utils_types_1.Severity.error });
            }
            else {
                debug(`Grade ${grade} for ${resource} is ok.`);
            }
        };
        const notifyError = (resource, error) => {
            debug(`Error getting data for ${resource} %O`, error);
            context.report(resource, i18n_import_1.getMessage('couldNotGetResults', context.language, resource), { severity: utils_types_1.Severity.warning });
        };
        const start = async ({ resource }) => {
            if (!resource.startsWith('https://')) {
                const message = i18n_import_1.getMessage('doesNotSupportHTTPS', context.language, resource);
                debug(message);
                context.report(resource, message, { severity: utils_types_1.Severity.error });
                return;
            }
            const ssl = await Promise.resolve().then(() => require('node-ssllabs'));
            const ssllabs = util_1.promisify(ssl.scan);
            debug(`Starting SSL Labs scan for ${resource}`);
            scanOptions.host = resource;
            promise = ssllabs(scanOptions)
                .catch((error) => {
                failed = true;
                notifyError(resource, error);
            });
        };
        const end = async ({ resource }) => {
            if (!promise || failed) {
                return;
            }
            debug(`Waiting for SSL Labs results for ${resource}`);
            let host;
            try {
                host = await promise;
            }
            catch (e) {
                notifyError(resource, e);
                return;
            }
            debug(`Received SSL Labs results for ${resource}`);
            if (!host || !host.endpoints || host.endpoints.length === 0) {
                const msg = i18n_import_1.getMessage('noResults', context.language, resource);
                debug(msg);
                context.report(resource, msg, { severity: utils_types_1.Severity.warning });
                return;
            }
            host.endpoints.forEach((endpoint) => {
                verifyEndpoint(resource, endpoint);
            });
        };
        loadHintConfig();
        /*
         * We are using `fetch::end::html` instead of `scan::start`
         * or `fetch::start` because the `ssllabs` API doesn't
         * follow the redirects, so we need to use the final url
         * (e.g.: https://developer.microsoft.com/en-us/microsoft-edge/
         * instead of http://edge.ms).
         */
        context.on('fetch::end::html', start);
        context.on('scan::end', end);
    }
}
exports.default = SSLLabsHint;
SSLLabsHint.meta = meta_1.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGludC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oaW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7O0FBRUg7Ozs7R0FJRztBQUVILDZFQUE2RTtBQUU3RSwrQkFBaUM7QUFFakMsbURBQStDO0FBRS9DLG1EQUE2QztBQUM3QyxtQ0FBaUY7QUFFakYsaUNBQTBCO0FBQzFCLCtDQUEyQztBQUUzQyxNQUFNLEtBQUssR0FBRyxtQkFBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBRTVCOzs7O0dBSUc7QUFFSCxNQUFxQixXQUFXO0lBSTVCLFlBQW1CLE9BQW9CO1FBRW5DLHdEQUF3RDtRQUN4RCxJQUFJLE9BQStCLENBQUM7UUFDcEMsMENBQTBDO1FBQzFDLElBQUksWUFBWSxHQUF3QixJQUFJLENBQUM7UUFDN0MsbURBQW1EO1FBQ25ELElBQUksV0FBVyxHQUFtQjtZQUM5QixHQUFHLEVBQUUsTUFBTTtZQUNYLFNBQVMsRUFBRSxJQUFJO1lBQ2YsSUFBSSxFQUFFLEVBQUU7WUFDUixNQUFNLEVBQUUsQ0FBQztTQUNaLENBQUM7UUFDRiwyQ0FBMkM7UUFDM0MsSUFBSSxNQUFNLEdBQVksS0FBSyxDQUFDO1FBRTVCLE1BQU0sY0FBYyxHQUFHLEdBQUcsRUFBRTtZQUN4QixZQUFZLEdBQUcsQ0FBQyxPQUFPLENBQUMsV0FBVyxJQUFJLE9BQU8sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDO1lBQzFFLE1BQU0sY0FBYyxHQUFHLENBQUMsT0FBTyxDQUFDLFdBQVcsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUVsRixXQUFXLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDN0QsQ0FBQyxDQUFDO1FBRUYsTUFBTSxjQUFjLEdBQUcsQ0FBQyxRQUFnQixFQUFFLEVBQUUsS0FBSyxFQUFFLFVB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