"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const sinon = require("sinon");
const proxyquire = require("proxyquire");
const test = ava_1.default;
const asUri = { getAsUri() { } };
const initContext = (t) => {
    t.context.loadJSONFileModule = () => {
        return null;
    };
    t.context.asPathString = () => {
        return '';
    };
    t.context.path = {
        dirname() {
            return '';
        },
        resolve() {
            return '';
        }
    };
    t.context.sandbox = sinon.createSandbox();
};
const loadScript = (context) => {
    const script = proxyquire('../src/final-config', {
        '@hint/utils-fs': { loadJSONFile: context.loadJSONFileModule },
        '@hint/utils-network': {
            asPathString: context.asPathString,
            asUri
        },
        path: context.path
    });
    return script.finalConfig;
};
test.beforeEach(initContext);
test.afterEach.always((t) => {
    t.context.sandbox.restore();
});
test(`If config doesn't have an extends property, it should return the same object`, (t) => {
    const finalConfig = loadScript(t.context);
    const config = { extends: '' };
    const result = finalConfig(config, 'resource');
    t.true(config === result);
});
test('If there is a circular reference, it should return an instance of an Error', (t) => {
    const sandbox = t.context.sandbox;
    sandbox.stub(t.context, 'asPathString').returns('circularReference');
    sandbox.stub(t.context.path, 'resolve').returns('circularReference');
    const finalConfig = loadScript(t.context);
    const config = { extends: 'circularReference' };
    const result = finalConfig(config, 'circularReference');
    t.true(result instanceof Error);
    t.is(result.message, 'Circular reference found in file circularReference');
});
test('If one of the extended files is no a valid JSON, it should return an instance of an Error', (t) => {
    const sandbox = t.context.sandbox;
    sandbox.stub(t.context, 'asPathString').returns('valid-with-invalid-extends');
    sandbox.stub(t.context.path, 'resolve').returns('invalid-extends');
    sandbox.stub(t.context, 'loadJSONFileModule').throws(new Error('InvalidJSON'));
    const finalConfig = loadScript(t.context);
    const config = { extends: 'invalid-extends' };
    const result = finalConfig(config, 'valid-with-invalid-extends');
    t.true(result instanceof Error);
});
test('If everything is ok, it should merge all the extended configurations', (t) => {
    const sandbox = t.context.sandbox;
    sandbox.stub(t.context, 'asPathString').returns('valid-with-extends');
    sandbox.stub(t.context.path, 'resolve')
        .onFirstCall()
        .returns('valid-extends')
        .onSecondCall()
        .returns('valid-extends-2');
    const miscStub = sandbox.stub(t.context, 'loadJSONFileModule')
        .onFirstCall()
        .returns({
        extends: 'valid-extends-2',
        name: 'valid-extends'
    })
        .onSecondCall()
        .returns({
        extends: null,
        name: 'valid-extends-2'
    });
    const finalConfig = loadScript(t.context);
    const config = {
        extends: 'valid-extends',
        name: 'valid'
    };
    const result = finalConfig(config, 'valid-with-extends');
    t.true(miscStub.calledTwice);
    t.is(result && result.name, 'valid');
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluYWwtY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vdGVzdHMvZmluYWwtY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkJBQStEO0FBQy9ELCtCQUErQjtBQUMvQix5Q0FBeUM7QUF5QnpDLE1BQU0sSUFBSSxHQUFHLGFBQXVDLENBQUM7QUFFckQsTUFBTSxLQUFLLEdBQUcsRUFBRSxRQUFRLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFFakMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxDQUFrQyxFQUFFLEVBQUU7SUFDdkQsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsR0FBRyxHQUFzQixFQUFFO1FBQ25ELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUMsQ0FBQztJQUVGLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxHQUFHLEdBQVcsRUFBRTtRQUNsQyxPQUFPLEVBQUUsQ0FBQztJQUNkLENBQUMsQ0FBQztJQUVGLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHO1FBQ2IsT0FBTztZQUNILE9BQU8sRUFBRSxDQUFDO1FBQ2QsQ0FBQztRQUNELE9BQU87WUFDSCxPQUFPLEVBQUUsQ0FBQztRQUNkLENBQUM7S0FDSixDQUFDO0lBQ0YsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQzlDLENBQUMsQ0FBQztBQUVGLE1BQU0sVUFBVSxHQUFHLENBQUMsT0FBc0IsRUFBRSxFQUFFO0lBQzFDLE1BQU0sTUFBTSxHQUF5QyxVQUFVLENBQUMscUJBQXFCLEVBQUU7UUFDbkYsZ0JBQWdCLEVBQUUsRUFBRSxZQUFZLEVBQUUsT0FBTyxDQUFDLGtCQUFrQixFQUFFO1FBQzlELHFCQUFxQixFQUFFO1lBQ25CLFlBQVksRUFBRSxPQUFPLENBQUMsWUFBWTtZQUNsQyxLQUFLO1NBQ1I7UUFDRCxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUk7S0FDckIsQ0FBQyxD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