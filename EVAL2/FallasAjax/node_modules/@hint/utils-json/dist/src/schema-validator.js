"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ajv = require("ajv");
const cloneDeep = require("lodash/cloneDeep");
const forEach = require("lodash/forEach");
const groupBy = require("lodash/groupBy");
const reduce = require("lodash/reduce");
const without = require("lodash/without");
/*
 * If we want to use the ajv types in TypeScript, we need to import
 * ajv in a lowsercase variable 'ajv', otherwise, we can't use types
 * like `ajv.Ajv'.
 */
const validator = new ajv({
    $data: true,
    allErrors: true,
    logger: false,
    useDefaults: true,
    verbose: true
});
var ErrorKeyword;
(function (ErrorKeyword) {
    ErrorKeyword["additionalProperties"] = "additionalProperties";
    ErrorKeyword["anyOf"] = "anyOf";
    ErrorKeyword["enum"] = "enum";
    ErrorKeyword["oneOf"] = "oneOf";
    ErrorKeyword["pattern"] = "pattern";
    ErrorKeyword["required"] = "required";
    ErrorKeyword["type"] = "type";
    ErrorKeyword["uniqueItems"] = "uniqueItems";
})(ErrorKeyword || (ErrorKeyword = {}));
const generateError = (type, action) => {
    return (error, errors) => {
        if (error.keyword !== type) {
            return null;
        }
        const property = error.dataPath.substr(1);
        return action(error, property, errors);
    };
};
/**
 * Returns a readable error for 'required' errors.
 */
const generateRequiredError = generateError(ErrorKeyword.required, (error, property) => {
    return `'${property ? property : 'root'}' ${error.message}`;
});
/**
 * Returns a readable error for 'additionalProperty' errors.
 */
const generateAdditionalPropertiesError = generateError(ErrorKeyword.additionalProperties, (error, property) => {
    const additionalProperty = error.params.additionalProperty;
    return `'${property ? property : 'root'}' ${property ? error.message : `${error.message}`}. Additional property found '${additionalProperty}'.`;
});
/**
 * Returns a readable error for 'enum' errors.
 */
const generateEnumError = generateError(ErrorKeyword.enum, (error, property) => {
    const allowedValues = error.params.allowedValues;
    return `'${property}' ${error.message} '${allowedValues.join(', ')}'. Value found '${error.data}'`;
});
/**
 * Returns a readable error for 'pattern' errors.
 */
const generatePatternError = generateError(ErrorKeyword.pattern, (error, property) => {
    return `'${property}' ${error.message && error.message.replace(/"/g, '\'')}. Value found '${error.data}'`;
});
/**
 * Returns a readable error for 'type' errors.
 */
const generateTypeError = generateError(ErrorKeyword.type, (error, property) => {
    return `'${property}' should be '${error.params.type}'.`;
});
const generateAnyOfError = generateError(ErrorKeyword.anyOf, (error, property, errors) => {
    const otherErrors = without(errors, error);
    const results = otherErrors.map((otherError) => {
        // eslint-disable-next-line @typescript-eslint/no-use-before-define, no-use-before-define
        return generate(otherError);
    });
    return results.join(' or ');
});
const generateUniqueItemError = generateError(ErrorKeyword.uniqueItems, (error, property) => {
    return `'${property}' ${error.message && error.message.replace(/"/g, '\'')}.`;
});
const getRequiredProperty = (error) => {
    return `'${error.params.missingProperty}'`;
};
const getTypeProperty = (error) => {
    return `'${error.params.type}'`;
};
const getEnumValues = (error) => {
    return `'${error.params.allowedValues.join(', ')}'`;
};
const generateAnyOfMessageRequired = (errors) => {
    return `should have required ${errors.length === 1 ? 'property' : 'properties'} ${errors.map(getRequiredProperty).join(' or ')}`;
};
const generateAnyOfMessageType = (errors) => {
    return `should be ${errors.map(getTypeProperty).join(' or ')}.`;
};
const generateAnyOfMessageEnum = (errors) => {
    return `should be equal to one of the allowed values ${errors.map(getEnumValues).join(' or ')}. Value found '${JSON.stringify(errors[0].data)}'.`;
};
const generateAnyOfMessage = {
    [ErrorKeyword.required]: generateAnyOfMessageRequired,
    [ErrorKeyword.type]: generateAnyOfMessageType,
    [ErrorKeyword.enum]: generateAnyOfMessageEnum
};
const errorGenerators = [generateAdditionalPropertiesError, generateEnumError, generatePatternError, generateTypeError, generateUniqueItemError, generateRequiredError, generateAnyOfError];
/**
 * Returns a readable error message.
 */
const generate = (error, errors) => {
    return errorGenerators.reduce((message, generator) => {
        const newErrorMessage = generator(error, errors);
        if (newErrorMessage) {
            return newErrorMessage;
        }
        return message;
    }, error.message || '');
};
/**
 * Returns a readable error for 'anyOf' and 'oneOf' errors.
 * e.g.: 'root' should have required properties 'connector' or 'extends'
 */
const generateAnyOfGroupedError = (error, errors) => {
    const otherErrors = without(errors, error);
    const grouped = groupBy(otherErrors, 'keyword');
    const results = reduce(grouped, (allMessages, groupedErrors, keyword) => {
        const dataPath = error.dataPath;
        const messageGenerator = generateAnyOfMessage[keyword];
        if (messageGenerator) {
            allMessages.push(`'${dataPath ? dataPath.substr(1) : 'root'}' ${messageGenerator(groupedErrors)}`);
            return allMessages;
        }
        groupedErrors.forEach((error) => {
            /* istanbul ignore next */
            const errorGenerated = generate(error, groupedErrors) || '';
            /* istanbul ignore else */
            if (errorGenerated) {
                allMessages.push(`${errorGenerated}`);
            }
        });
        return allMessages;
    }, []);
    return results.join(' Or ');
};
const generateErrorsMessage = (errors) => {
    const grouped = groupBy(errors, 'keyword');
    const result = reduce(grouped, (allMessages, groupedErrors, keyword) => {
        if (keyword === ErrorKeyword.required) {
            const dataPath = groupedErrors[0].dataPath;
            allMessages.push(`'${dataPath ? dataPath.substr(1) : 'root'}' should have required ${groupedErrors.length === 1 ? 'property' : 'properties'} ${groupedErrors.map(getRequiredProperty).join(' and ')}`);
            return allMessages;
        }
        groupedErrors.forEach((error) => {
            allMessages.push(generate(error, groupedErrors) || '');
        });
        return allMessages;
    }, []);
    return result;
};
/**
 * Group messages with the same data path.
 * e.g.:
 * * Input (only messages):
 * *   - should be equal to one of the allowed values (dataPath: ".hints['amp-validator']")
 * *   - should be number (dataPath: ".hints['amp-validator'])"
 * *   - should be equal to one of the allowed values (dataPath: ".hints['amp-validator']")
 * *   - should have required property 'connector' (dataPath: "")
 * *   - should have required property 'extends' (dataPath: "")
 * *   - should match some schema in anyOf (dataPath: "")
 *
 * * Output (only messages):
 * *   - 'hints['amp-validator']' should be equal to one of the allowed values 'off, warning, error' or '0, 1, 2'. Value found '"notvalid"'. Or 'hints['amp-validator']' should be 'number'.
 * *   - 'root' should have required properties 'connector' or 'extends'
 */
const groupMessages = (errors) => {
    const grouped = groupBy(errors, 'dataPath');
    const result = reduce(grouped, (allErrors, groupErrors) => {
        let errors = groupErrors;
        const anyOf = groupErrors.find((error) => {
            return error.keyword === ErrorKeyword.anyOf || error.keyword === ErrorKeyword.oneOf;
        });
        if (anyOf) {
            const anyOfErrors = groupErrors.filter((error) => {
                /* istanbul ignore next */
                return error.schemaPath.includes(anyOf.schemaPath) || anyOf.schema.some((schema) => {
                    return error.schemaPath.includes(schema.$ref);
                });
            });
            errors = without(groupErrors, ...anyOfErrors);
            allErrors.push({
                errors: anyOfErrors,
                location: anyOfErrors[0].location,
                message: generateAnyOfGroupedError(anyOf, anyOfErrors)
            });
            /* istanbul ignore else */
            if (errors.length === 0) {
                return allErrors;
            }
        }
        /*
         * If there is no 'anyOf' error, then join with 'and' the rest of the messages.
         * if they have the same keyword.
         */
        const groupedByLocation = groupBy(errors, (error) => {
            /* istanbul ignore if */
            if (error.location) {
                return `column${error.location.column}row${error.location.column}`;
            }
            return '-';
        });
        forEach(groupedByLocation, (group) => {
            allErrors.push({
                errors: group,
                location: group[0].location,
                message: generateErrorsMessage(group).join(' and ')
            });
        });
        return allErrors;
        // return allMessages;
    }, []);
    return result;
};
/**
 * Add location information to the provided schema error object.
 */
/* istanbul ignore next */
const errorWithLocation = (error, getLocation) => {
    let path = error.dataPath;
    const additionalProperty = error.params && error.params.additionalProperty;
    if (additionalProperty) {
        path = path ? `${path}.${additionalProperty}` : additionalProperty;
    }
    return Object.assign(error, { location: getLocation(path.replace(/'/g, '')) || undefined });
};
const prettify = (errors) => {
    const grouped = groupBy(errors, 'dataPath');
    const result = reduce(grouped, (allMessages, groupErrors) => {
        groupErrors.forEach((error) => {
            allMessages.push(generate(error, groupErrors) || '');
        });
        return allMessages;
    }, []);
    return result;
};
exports.validate = (schema, json, getLocation) => {
    // We clone the incoming data because the validator can modify it.
    const data = cloneDeep(json);
    const validateFunction = validator.compile(schema);
    const valid = validateFunction(data);
    let errors = validateFunction.errors || [];
    /* istanbul ignore if */
    if (errors && getLocation) {
        errors = errors.map((e) => {
            return errorWithLocation(e, getLocation);
        });
    }
    const prettifiedErrors = prettify(errors);
    const groupedErrors = groupMessages(errors);
    return {
        data,
        errors,
        groupedErrors,
        prettifiedErrors,
        valid
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZW1hLXZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY2hlbWEtdmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkJBQTJCO0FBQzNCLDhDQUErQztBQUMvQywwQ0FBMkM7QUFDM0MsMENBQTJDO0FBQzNDLHdDQUF5QztBQUN6QywwQ0FBMkM7QUFJM0M7Ozs7R0FJRztBQUNILE1BQU0sU0FBUyxHQUFHLElBQUksR0FBRyxDQUFDO0lBQ3RCLEtBQUssRUFBRSxJQUFJO0lBQ1gsU0FBUyxFQUFFLElBQUk7SUFDZixNQUFNLEVBQUUsS0FBSztJQUNiLFdBQVcsRUFBRSxJQUFJO0lBQ2pCLE9BQU8sRUFBRSxJQUFJO0NBQ0QsQ0FBQyxDQUFDO0FBRWxCLElBQUssWUFTSjtBQVRELFdBQUssWUFBWTtJQUNiLDZEQUE2QyxDQUFBO0lBQzdDLCtCQUFlLENBQUE7SUFDZiw2QkFBYSxDQUFBO0lBQ2IsK0JBQWUsQ0FBQTtJQUNmLG1DQUFtQixDQUFBO0lBQ25CLHFDQUFxQixDQUFBO0lBQ3JCLDZCQUFhLENBQUE7SUFDYiwyQ0FBMkIsQ0FBQTtBQUMvQixDQUFDLEVBVEksWUFBWSxLQUFaLFlBQVksUUFTaEI7QUFFRCxNQUFNLGFBQWEsR0FBRyxDQUFDLElBQVksRUFBRSxNQUEwRixFQUEyRSxFQUFFO0lBQ3hNLE9BQU8sQ0FBQyxLQUFzQixFQUFFLE1BQTBCLEVBQWlCLEVBQUU7UUFDekUsSUFBSSxLQUFLLENBQUMsT0FBTyxLQUFLLElBQUksRUFBRTtZQUN4QixPQUFPLElBQUksQ0FBQztTQUNmO1FBRUQsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFMUMsT0FBTyxNQUFNLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMzQyxDQUFDLENBQUM7QUFDTixDQUFDLENBQUM7QUFFRjs7R0FFRztB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