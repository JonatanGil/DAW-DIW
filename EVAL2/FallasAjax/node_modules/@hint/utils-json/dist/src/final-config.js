"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const merge = require("lodash/merge");
const utils_network_1 = require("@hint/utils-network");
const utils_fs_1 = require("@hint/utils-fs");
exports.finalConfig = (config, resource) => {
    if (!config.extends) {
        return config;
    }
    const configIncludes = [];
    // `resource` has already been loaded to provide `config` so `getAsUri` won't be null.
    let configPath = utils_network_1.asPathString(utils_network_1.getAsUri(resource));
    /*
     * `configPath` will have the format c:/path or /path
     * depending on what OS we are running sonar.
     * In case that we are running on Windows, we need
     * to normalize the path to c:\path before continue.
     */
    configIncludes.push(path.normalize(configPath));
    let finalConfigJSON = merge({}, config);
    while (finalConfigJSON.extends) {
        const lastPath = configPath;
        const configDir = path.dirname(configPath);
        configPath = path.resolve(configDir, finalConfigJSON.extends);
        if (configIncludes.includes(configPath)) {
            const error = new Error(`Circular reference found in file ${lastPath}`);
            const originalPathUri = utils_network_1.getAsUri(configIncludes[0]);
            error.resource = originalPathUri && originalPathUri.toString() || lastPath;
            return error;
        }
        delete finalConfigJSON.extends;
        try {
            const extendedConfig = utils_fs_1.loadJSONFile(configPath);
            configIncludes.push(configPath);
            finalConfigJSON = merge({}, extendedConfig, finalConfigJSON);
        }
        catch (err) {
            const lastPathUri = utils_network_1.getAsUri(lastPath);
            err.resource = lastPathUri && lastPathUri.toString() || lastPath;
            return err;
        }
    }
    return finalConfigJSON;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluYWwtY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2ZpbmFsLWNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUE2QjtBQUU3QixzQ0FBdUM7QUFFdkMsdURBQTZEO0FBQzdELDZDQUE4QztBQUlqQyxRQUFBLFdBQVcsR0FBRyxDQUFxQyxNQUFTLEVBQUUsUUFBZ0IsRUFBcUIsRUFBRTtJQUM5RyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRTtRQUNqQixPQUFPLE1BQU0sQ0FBQztLQUNqQjtJQUVELE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQztJQUUxQixzRkFBc0Y7SUFDdEYsSUFBSSxVQUFVLEdBQUcsNEJBQVksQ0FBQyx3QkFBUSxDQUFDLFFBQVEsQ0FBRSxDQUFDLENBQUM7SUFFbkQ7Ozs7O09BS0c7SUFDSCxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUVoRCxJQUFJLGVBQWUsR0FBTSxLQUFLLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBRTNDLE9BQU8sZUFBZSxDQUFDLE9BQU8sRUFBRTtRQUM1QixNQUFNLFFBQVEsR0FBRyxVQUFVLENBQUM7UUFDNUIsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUUzQyxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRTlELElBQUksY0FBYyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUVyQyxNQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxvQ0FBb0MsUUFBUSxFQUFFLENBQWtCLENBQUM7WUFDekYsTUFBTSxlQUFlLEdBQUcsd0JBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVwRCxLQUFLLENBQUMsUUFBUSxHQUFHLGVBQWUsSUFBSSxlQUFlLENBQUMsUUFBUSxFQUFFLElBQUksUUFBUSxDQUFDO1lBRTNFLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBRUQsT0FBTyxlQUFlLENBQUMsT0FBTyxDQUFDO1FBRS9CLElBQUk7WUFDQSxNQUFNLGNBQWMsR0FBRyx1QkFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBRWhELGNBQWMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFFaEMsZUFBZSxHQUFHLEtBQUssQ0FBQyxFQUFFLEVBQUUsY0FBYyxFQUFFLGVBQWUsQ0FBQyxDQUFDO1NBQ2hFO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDVixNQUFNLFdBQVcsR0FBRyx3QkFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRXZDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsV0FBVyxJQUFJLFdBQVcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxRQUFRLENBQUM7WUFFakUsT0FBTyxHQUFHLENBQUM7U0FDZDtLQUNKO0lBRUQsT0FBTyxlQUFlLENBQUM7QUFDM0IsQ0FBQyxDQUFDIn0=