"use strict";
/**
 * @fileoverview Require scripts and styles to use Subresource Integrity
 */
Object.defineProperty(exports, "__esModule", { value: true });
const crypto = require("crypto");
const url_1 = require("url");
const utils_debug_1 = require("@hint/utils-debug");
const utils_string_1 = require("@hint/utils-string");
const utils_network_1 = require("@hint/utils-network");
const utils_types_1 = require("@hint/utils-types");
const types_1 = require("./types");
const meta_1 = require("./meta");
const i18n_import_1 = require("./i18n.import");
const debug = utils_debug_1.debug(__filename);
/*
 * ------------------------------------------------------------------------------
 * Public
 * ------------------------------------------------------------------------------
 */
class SRIHint {
    constructor(context) {
        this.origin = '';
        this.finalUrl = '';
        this.baseline = 'sha384';
        this.originCriteria = 'crossOrigin';
        this.cache = new Map();
        /** Contains the keys cache keys for the element already reported. */
        this.reportedKeys = new Set();
        this.context = context;
        if (context.hintOptions) {
            this.baseline = context.hintOptions.baseline || this.baseline;
            this.originCriteria = context.hintOptions.originCriteria || this.originCriteria;
        }
        context.on('fetch::end::script', (evt) => {
            this.validateResource(evt, {
                final: this.finalUrl,
                origin: this.origin
            });
        });
        context.on('fetch::end::css', (evt) => {
            this.validateResource(evt, {
                final: this.finalUrl,
                origin: this.origin
            });
        });
        context.on('element::script', this.validateElement.bind(this));
        context.on('element::link', this.validateElement.bind(this));
        context.on('fetch::end::html', this.setOrigin.bind(this));
        context.on('scan::end', this.onScanEnd.bind(this));
    }
    /**
     * Returns the hash of the content for the given `sha` strengh in a format
     * valid with SRI:
     * * base64
     * * `sha384-hash`
     */
    calculateHash(content, sha) {
        const hash = crypto
            .createHash(sha)
            .update(content)
            .digest('base64');
        return hash;
    }
    /**
     * Checks if the element that originated the request/response is a
     * `script` or a `stylesheet`. There could be other downloads from
     * a `link` element that are not stylesheets and should be ignored.
     */
    isScriptOrLink(evt) {
        debug('Is <script> or <link>?');
        const { element } = evt;
        /*
         * We subscribe to `fetch::end::script|css`, so element should
         * always exist. "that should never happen" is the fastest way
         * to make it happen so better be safe.
         */
        /* istanbul ignore if */
        if (!element) {
            return Promise.resolve(false);
        }
        const nodeName = utils_string_1.normalizeString(element.nodeName);
        /*
         * The element is not one that we care about (could be an img,
         * video, etc.). No need to report anything, but we can stop
         * processing things right away.
         */
        if (nodeName === 'script') {
            return Promise.resolve(!!element.getAttribute('src'));
        }
        if (nodeName === 'link') {
            const relValues = (utils_string_1.normalizeString(element.getAttribute('rel'), '')).split(' '); // normalizeString won't return null as a default was passed.
            return Promise.resolve(relValues.includes('stylesheet'));
        }
        return Promise.resolve(false);
    }
    report(resource, message, options, evt) {
        const errorData = {
            message,
            options,
            resource
        };
        const cacheKey = this.getCacheKey(evt);
        const cacheErrors = this.getCache(evt);
        cacheErrors.push(errorData);
        this.reportedKeys.add(cacheKey);
        this.context.report(errorData.resource, errorData.message, errorData.options);
    }
    /**
     * Verifies if the response is eligible for integrity validation. I.E.:
     *
     * * `same-origin`
     * * `cross-origin` on a CORS-enabled request
     *
     * More info in https://w3c.github.io/webappsec-subresource-integrity/#is-response-eligible
     */
    isEligibleForIntegrityValidation(evt, urls) {
        debug('Is eligible for integrity validation?');
        const { element, resource } = evt;
        const resourceOrigin = new url_1.URL(resource).origin;
        if (urls.origin === resourceOrigin) {
            return Promise.resolve(true);
        }
        // cross-origin scripts need to be loaded with a valid "crossorigin" attribute (ie.: anonymous or use-credentials)
        const crossorigin = utils_string_1.normalizeString(element && element.getAttribute('crossorigin'));
        if (!crossorigin) {
            const message = i18n_import_1.getMessage('crossoriginNeeded', this.context.language, resource);
            this.report(urls.final, message, { element, severity: utils_types_1.Severity.error }, evt);
            return Promise.resolve(false);
        }
        const validCrossorigin = crossorigin === 'anonymous' || crossorigin === 'use-credentials';
        if (!validCrossorigin) {
            const message = i18n_import_1.getMessage('crossoriginInvalid', this.context.language, [resource, crossorigin]);
            this.report(urls.final, message, { element, severity: utils_types_1.Severity.error }, evt);
        }
        return Promise.resolve(validCrossorigin);
    }
    /**
     * Checks if the element that triggered the download has the `integrity`
     * attribute if required based on the selected origin criteria.
     */
    hasIntegrityAttribute(evt, urls) {
        debug('has integrity attribute?');
        const { element, resource } = evt;
        const integrity = element && element.getAttribute('integrity');
        const resourceOrigin = new url_1.URL(resource).origin;
        const integrityRequired = types_1.OriginCriteria[this.originCriteria] === types_1.OriginCriteria.all ||
            urls.origin !== resourceOrigin;
        if (integrityRequired && !integrity) {
            const message = i18n_import_1.getMessage('noIntegrity', this.context.language, resource);
            this.report(urls.final, message, { element, severity: utils_types_1.Severity.warning }, evt);
        }
        return Promise.resolve(!!integrity);
    }
    /**
     * Checks if the format of the `integrity` attribute is valid and if the used hash meets
     * the baseline (by default sha-384). In the case of multiple algorithms used, the
     * one with the highest priority is the used one to validate. E.g.:
     *
     * * `<script src="https://example.com/example-framework.js"
     *   integrity="sha384-Li9vy3DqF8tnTXuiaAJuML3ky+er10rcgNR/VqsVpcw+ThHmYcwiB1pbOxEbzJr7"
     *   crossorigin="anonymous"></script>`
     * * `<script src="https://example.com/example-framework.js"
     *   integrity="sha384-Li9vy3DqF8tnTXuiaAJuML3ky+er10rcgNR/VqsVpcw+ThHmYcwiB1pbOxEbzJr7
     *              sha384-+/M6kredJcxdsqkczBUjMLvqyHb1K/JThDXWsBVxMEeZHEaMKEOEct339VItX1zB"
     *   crossorigin="anonymous"></script>`
     *
     * https://w3c.github.io/webappsec-subresource-integrity/#agility
     */
    isIntegrityFormatValid(evt, urls) {
        debug('Is integrity attribute valid?');
        const { element, resource } = evt;
        const integrity = element && element.getAttribute('integrity');
        const integrityRegExp = /^sha(256|384|512)-/;
        const integrityValues = integrity ? integrity.split(/\s+/) : [];
        let highestAlgorithmPriority = 0;
        const that = this;
        const areFormatsValid = integrityValues.every((integrityValue) => {
            const results = integrityRegExp.exec(integrityValue);
            const isValid = Array.isArray(results);
            if (!isValid) {
                // integrity must exist since we're iterating over integrityValues
                const message = i18n_import_1.getMessage('invalidIntegrity', this.context.language, [resource, integrity.substr(0, 10)]);
                that.report(urls.final, message, { element, severity: utils_types_1.Severity.error }, evt);
                return false;
            }
            // results won't be null since isValid must be true to get here.
            const algorithm = `sha${results[1]}`;
            const algorithmPriority = types_1.Algorithms[algorithm];
            highestAlgorithmPriority = Math.max(algorithmPriority, highestAlgorithmPriority);
            return true;
        });
        if (!areFormatsValid) {
            return Promise.resolve(false);
        }
        const baseline = types_1.Algorithms[this.baseline];
        const meetsBaseline = highestAlgorithmPriority >= baseline;
        if (!meetsBaseline) {
            const message = i18n_import_1.getMessage('algorightmNotMeetBaseline', this.context.language, [types_1.Algorithms[highestAlgorithmPriority], this.baseline, resource]);
            this.report(urls.final, message, { element, severity: utils_types_1.Severity.warning }, evt);
        }
        return Promise.resolve(meetsBaseline);
    }
    /**
     * Checks if the resources is being delivered via HTTPS.
     *
     * More info: https://w3c.github.io/webappsec-subresource-integrity/#non-secure-contexts
     */
    isSecureContext(evt, urls) {
        debug('Is delivered on a secure context?');
        const { element, resource } = evt;
        const protocol = new url_1.URL(resource).protocol;
        const isSecure = protocol === 'https:';
        if (!isSecure) {
            const message = i18n_import_1.getMessage('resourceNotSecure', this.context.language, resource);
            this.report(urls.final, message, { element, severity: utils_types_1.Severity.error }, evt);
        }
        return Promise.resolve(isSecure);
    }
    /**
     * Calculates if the hash is the right one for the downloaded resource.
     *
     * An `integrity` attribute can have multiple hashes for the same algorithm and it will
     * pass as long as one validates.
     *
     * More info: https://w3c.github.io/webappsec-subresource-integrity/#does-response-match-metadatalist
     */
    hasRightHash(evt, urls) {
        debug('Does it have the right hash?');
        const { element, resource, response } = evt;
        const integrity = element && element.getAttribute('integrity');
        const integrities = integrity ? integrity.split(/\s+/) : [];
        const calculatedHashes = new Map();
        const isOK = integrities.some((integrityValue) => {
            const integrityRegExp = /^sha(256|384|512)-(.*)$/;
            const [, bits = '', hash = ''] = integrityRegExp.exec(integrityValue) || [];
            const calculatedHash = calculatedHashes.has(bits) ?
                calculatedHashes.get(bits) :
                this.calculateHash(response.body.content, `sha${bits}`);
            calculatedHashes.set(bits, calculatedHash);
            return hash === calculatedHash;
        });
        if (!isOK) {
            const hashes = [];
            calculatedHashes.forEach((value, key) => {
                hashes.push(`sha${key}-${value}`);
            });
            const message = i18n_import_1.getMessage('hashDoesNotMatch', this.context.language, [resource, hashes.join(', '), integrities.join(', ')]);
            this.report(urls.final, message, { element, severity: utils_types_1.Severity.error }, evt);
        }
        return Promise.resolve(isOK);
    }
    getCache(evt) {
        const key = this.getCacheKey(evt);
        if (!this.cache.has(key)) {
            this.cache.set(key, []);
        }
        return this.cache.get(key);
    }
    getCacheKey(evt) {
        const { element, resource } = evt;
        /* istanbul ignore if */
        if (!element) {
            return '';
        }
        const integrity = element.getAttribute('integrity');
        return `${resource}${integrity}`;
    }
    addToCache(evt) {
        const { element, resource } = evt;
        /* istanbul ignore if */
        if (!element) {
            return Promise.resolve(false);
        }
        const integrity = element.getAttribute('integrity');
        const key = `${resource}${integrity}`;
        if (!this.cache.has(key)) {
            this.cache.set(key, []);
        }
        return Promise.resolve(true);
    }
    /**
     * If the resource is a local file, ignore the analysis.
     * The sri usually is added on the building process before publish,
     * so is going to be very common that the sri doesn't exists
     * for local files.
     */
    isNotLocalResource(evt) {
        const { resource } = evt;
        if (resource.startsWith('file://')) {
            debug(`Ignoring local resource: ${resource}`);
            return Promise.resolve(false);
        }
        return Promise.resolve(true);
    }
    /**
     * The item is cached. For the VSCode extension and the
     * local connector with option 'watch' activated we
     * should report what we have in the cache after the
     * first 'scan::end'.
     */
    isInCache(evt) {
        const cacheKey = this.getCacheKey(evt);
        const isInCache = this.cache.has(cacheKey);
        if (isInCache && !this.reportedKeys.has(cacheKey)) {
            this.getCache(evt).forEach((error) => {
                this.context.report(error.resource, error.message, error.options);
            });
            this.reportedKeys.add(cacheKey);
            return Promise.resolve(false);
        }
        return Promise.resolve(!isInCache);
    }
    /**
     * `requestAsync` is not included in webpack bundle for `extension-browser`.
     * This is ok because the browser will have already requested this via `fetch::end`
     * events.
     *
     * Note: We are not using `Requester` because it depends on `iltorb` and it can
     * cause problems with the vscode-extension because `iltorb` depends on the
     * node version for which it was compiled.
     *
     * We can probably use Requester once https://github.com/webhintio/hint/issues/1604 is done,
     * and vscode use the node version that support it.
     *
     * When using crossorigin="use-credentials" and the response contains
     * the header `Access-Control-Allow-Origin` with value `*` Chrome blocks the access
     * to the resource by CORS policy, so we will reach this point
     * through the traverse of the dom and response.body.content will be ''. In this case,
     * we have to prevent the download of the resource.
     */
    async downloadContent(evt, urls) {
        const { resource, response, element } = evt;
        if (!utils_network_1.requestAsync && !response.body.content) {
            // Stop the validations.
            return false;
        }
        if (!utils_network_1.requestAsync) {
            return true;
        }
        /* If the content already exists, we don't need to download it. */
        if (response.body.content) {
            return true;
        }
        try {
            response.body.content = await utils_network_1.requestAsync({
                gzip: true,
                method: 'GET',
                rejectUnauthorized: false,
                url: resource
            });
            return true;
        }
        catch (e) {
            debug(`Error accessing ${resource}. ${JSON.stringify(e)}`);
            this.context.report(urls.final, i18n_import_1.getMessage('canNotGetResource', this.context.language, resource), { element, severity: utils_types_1.Severity.error });
            return false;
        }
    }
    isNotIgnored(evt) {
        return !this.context.isUrlIgnored(evt.resource);
    }
    /** Validation entry point. */
    async validateResource(evt, urls) {
        const validations = [
            this.isNotIgnored,
            this.isInCache,
            this.addToCache,
            this.isScriptOrLink,
            this.isNotLocalResource,
            this.isEligibleForIntegrityValidation,
            this.hasIntegrityAttribute,
            this.isIntegrityFormatValid,
            this.isSecureContext,
            this.downloadContent,
            this.hasRightHash
        ].map((fn) => {
            return fn.bind(this);
        });
        debug(`Validating integrity of: ${evt.resource}`);
        for (const validation of validations) {
            const valid = await validation(evt, urls);
            if (!valid) {
                break;
            }
        }
    }
    /**
     * Validation entry point for event element::script
     * or element::link
     */
    async validateElement(evt) {
        const isScriptOrLink = await this.isScriptOrLink(evt);
        if (!isScriptOrLink) {
            return;
        }
        const finalUrl = evt.resource;
        const origin = new url_1.URL(evt.resource).origin;
        /*
         * 'this.isScriptOrLink' has already checked
         * that the src or href attribute exists, so it is safe to use !.
         */
        const elementUrl = evt.element.getAttribute('src') || evt.element.getAttribute('href');
        evt.resource = evt.element.resolveUrl(elementUrl);
        const content = {
            request: {},
            response: { body: { content: '' } }
        };
        await this.validateResource(Object.assign(evt, {
            request: content.request,
            response: content.response
        }), {
            final: finalUrl,
            origin
        });
    }
    /** Sets the `origin` property using the initial request. */
    setOrigin(evt) {
        const { resource } = evt;
        this.origin = new url_1.URL(resource).origin; // Our @types/node doesn't have it
        this.finalUrl = resource;
    }
    onScanEnd() {
        this.reportedKeys.clear();
    }
}
exports.default = SRIHint;
SRIHint.meta = meta_1.default;
//# sourceMappingURL=data:application/json;base64,