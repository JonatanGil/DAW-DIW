"use strict";
/**
 * @fileoverview Checks if there are unnecesary redirects when accessign resources
 */
Object.defineProperty(exports, "__esModule", { value: true });
const utils_string_1 = require("@hint/utils-string");
const utils_types_1 = require("@hint/utils-types");
const meta_1 = require("./meta");
const i18n_import_1 = require("./i18n.import");
/*
 * ------------------------------------------------------------------------------
 * Public
 * ------------------------------------------------------------------------------
 */
class NoHttpRedirectHint {
    constructor(context) {
        /** The maximum number of hops for a resource. */
        const maxResourceHops = context.hintOptions && context.hintOptions['max-resource-redirects'] || 0;
        /** The maximum number of hops for the html. */
        const maxHTMLHops = context.hintOptions && context.hintOptions['max-html-redirects'] || 0;
        /**
         * Returns a function that will validate if the number of hops is within the limit passed by `maxHops`.
         * If it doesn't validate, it will notify the context.
         *
         * Ex.: `validateRequestEnd(10)(fetchEnd)` will verify if the event `fetchEnd` has had less than 10 hops.
         */
        const validateRequestEnd = (fetchEnd, eventName) => {
            const maxHops = eventName === 'fetch::end::html' ? maxHTMLHops : maxResourceHops;
            const { request, response, element } = fetchEnd;
            if (response.hops.length > maxHops) {
                let message;
                if (response.hops.length === 1) {
                    message = i18n_import_1.getMessage('redirectDectected', context.language, [response.hops.length.toString(), utils_string_1.cutString(request.url), maxHops.toString()]);
                }
                else {
                    message = i18n_import_1.getMessage('redirectsDectected', context.language, [response.hops.length.toString(), utils_string_1.cutString(request.url), maxHops.toString()]);
                }
                context.report(request.url, message, { element, severity: utils_types_1.Severity.warning });
            }
        };
        context.on('fetch::end::*', validateRequestEnd);
    }
}
exports.default = NoHttpRedirectHint;
NoHttpRedirectHint.meta = meta_1.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGludC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oaW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7QUFLSCxxREFBK0M7QUFDL0MsbURBQTZDO0FBRTdDLGlDQUEwQjtBQUMxQiwrQ0FBMkM7QUFFM0M7Ozs7R0FJRztBQUVILE1BQXFCLGtCQUFrQjtJQUluQyxZQUFtQixPQUFvQjtRQUVuQyxpREFBaUQ7UUFDakQsTUFBTSxlQUFlLEdBQVcsT0FBTyxDQUFDLFdBQVcsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFHLCtDQUErQztRQUMvQyxNQUFNLFdBQVcsR0FBVyxPQUFPLENBQUMsV0FBVyxJQUFJLE9BQU8sQ0FBQyxXQUFXLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFbEc7Ozs7O1dBS0c7UUFDSCxNQUFNLGtCQUFrQixHQUFHLENBQUMsUUFBa0IsRUFBRSxTQUFpQixFQUFFLEVBQUU7WUFDakUsTUFBTSxPQUFPLEdBQVcsU0FBUyxLQUFLLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQztZQUN6RixNQUFNLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsR0FBRyxRQUFRLENBQUM7WUFFaEQsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLEVBQUU7Z0JBQ2hDLElBQUksT0FBZSxDQUFDO2dCQUVwQixJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtvQkFDNUIsT0FBTyxHQUFHLHdCQUFVLENBQUMsbUJBQW1CLEVBQUUsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFLHdCQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7aUJBQzlJO3FCQUFNO29CQUNILE9BQU8sR0FBRyx3QkFBVSxDQUFDLG9CQUFvQixFQUFFLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsRUFBRSx3QkFBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUMvSTtnQkFFRCxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxzQkFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7YUFDakY7UUFDTCxDQUFDLENBQUM7UUFFRixPQUFPLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0lBQ3BELENBQUM7O0FBbkNMLHFDQW9DQztBQWxDMEIsdUJBQUksR0FBRyxjQUFJLENBQUMifQ==