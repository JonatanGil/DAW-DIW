"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_tests_helpers_1 = require("@hint/utils-tests-helpers");
const utils_types_1 = require("@hint/utils-types");
const hintPath = utils_tests_helpers_1.getHintPath(__filename);
// Headers.
const setCookie = (fields) => {
    return { 'set-cookie': fields };
};
// Headers that will pass.
const doubleQuotedValueHeader = setCookie(`cookieName="cookieValue"; Secure; HttpOnly`);
const standardHeader = setCookie(`cookieName=cookieValue; Secure; HttpOnly`);
const starnderHeaderLowerCase = setCookie(`cookieName=cookieValue; secure; httponly`);
const standardHeaderWithSecurePrefix = setCookie(`__Secure-ID=123; Secure; Domain=example.com; HttpOnly`);
const standardHeaderWithHostPrefix = setCookie(`__Host-ID=123; Secure; Path=/; HttpOnly`);
// Headers that will fail.
const noNameValueStringHeader = setCookie(`Max-Age=0; Secure; HttpOnly`);
const invalidAttributeHeader = setCookie(`cookieName=cookieValue; MaxAge=0; Secure; HttpOnly`);
const noSecureHeader = setCookie(`cookieName=cookieValue; HttpOnly`);
const noHttpOnlyHeader = setCookie(`cookieName=cookieValue; Secure`);
const invalidNameHeader = setCookie(`"cookieName"=cookieValue; Secure; HttpOnly`);
const invalidValueHeader = setCookie(`cookieName=cookie value; Secure; HttpOnly`);
const invalidDateFormatHeader = setCookie(`cookieName=cookieValue; expires=Wed, 31-Dec-97 23:59:59 GMT; Secure; HttpOnly`);
const trailingSemicolonHeader = setCookie(`cookieName=cookieValue; Secure; HttpOnly;`);
const multipleErrorsHeader = setCookie(`"cookieName"=cookie value`);
const noPathHostPrefixHeader = setCookie(`__Host-id=1; Secure; HttpOnly`);
const hasDomainHostPrefixHeader = setCookie(`__Host-id=1; Secure; Path=/; domain=example.com; HttpOnly`);
const maxAgeOnlyHeader = setCookie(`cookieName=cookieValue; Max-Age=123; secure; httponly`);
const expiresOnlyHeader = setCookie(`cookieName=cookieValue; expires=Wed, 21 Oct 2015 07:28:00 GMT; secure; httponly`);
const bothMaxAgeAndExpireHeader = setCookie(`cookieName=cookieValue; Max-Age=123; expires=Wed, 21 Oct 2015 07:28:00 GMT; secure; httponly`);
// Error messages.
const messages = (cookieName = 'cookiename') => {
    return {
        hasDomainHostPrefixError: `set-cookie header contains '__Host-' prefix but the 'domain' directive is set.`,
        invalidAttributeError: `'set-cookie' header contains unknown attribute 'maxage'.`,
        invalidDateFormatError: `Invalid date format in 'expires' value of the 'set-cookie' header to set '${cookieName}'. The recommended format is: Wed, 31 Dec 1997 23:59:59 GMT`,
        invalidNameError: `'set-cookie' header to set '${cookieName}' has an invalid cookie name.`,
        invalidValueError: `'set-cookie' header to set '${cookieName}' has an invalid cookie value.`,
        maxAgeNoExpireWarning: `Internet Explorer (IE 6, IE 7, and IE 8) doesn't support 'max-age' directive in the 'set-cookie' header to set 'cookiename'.`,
        maxAgePrecedenceWarning: `The 'max-age' attribute takes precedence when both 'expires' and 'max-age' both exist.`,
        noHttpOnlyHeaderError: `'set-cookie' header to set '${cookieName}' doesn't have the 'httponly' directive.`,
        noNameValueStringError: `'set-cookie' header doesn't contain a cookie name-value string.`,
        noPathHasHostPrefixError: `set-cookie header contains '__Host-' prefix but the 'path' directive doesn't have a value of '/'.`,
        noSecureHeaderError: `'set-cookie' header to set '${cookieName}' doesn't have the 'secure' directive.`,
        trailingSemicolonError: `'set-cookie' header to set '${cookieName}' has trailing ';'`
    };
};
const defaultTests = [
    {
        name: `Standard set-cookie header`,
        serverConfig: { '/': { headers: standardHeader } }
    },
    {
        name: `Cooke value is wrapped in double quotes`,
        serverConfig: { '/': { headers: doubleQuotedValueHeader } }
    },
    {
        name: `Directive names are in lowercases`,
        serverConfig: { '/': { headers: starnderHeaderLowerCase } }
    },
    {
        name: `Standard set-cookie header with '__secure' prefix`,
        serverConfig: { '/': { headers: standardHeaderWithSecurePrefix } }
    },
    {
        name: `Standard set-cookie header with '__Host' prefix`,
        serverConfig: { '/': { headers: standardHeaderWithHostPrefix } }
    },
    {
        name: `Header doesn't have cookie name-value-string`,
        reports: [{
                message: messages().noNameValueStringError,
                severity: utils_types_1.Severity.error
            }],
        serverConfig: { '/': { headers: noNameValueStringHeader } }
    },
    {
        name: `Header contains unknown attributes`,
        reports: [{
                message: messages().invalidAttributeError,
                severity: utils_types_1.Severity.warning
            }],
        serverConfig: { '/': { headers: invalidAttributeHeader } }
    },
    {
        name: `Header doesn't have 'Secure' directive`,
        reports: [{
                message: messages().noSecureHeaderError,
                severity: utils_types_1.Severity.error
            }],
        serverConfig: { '/': { headers: noSecureHeader } }
    },
    {
        name: `Header doesn't have 'HttpOnly' directive`,
        reports: [{
                message: messages().noHttpOnlyHeaderError,
                severity: utils_types_1.Severity.warning
            }],
        serverConfig: { '/': { headers: noHttpOnlyHeader } }
    },
    {
        name: `Cookie name contains invalid characters`,
        reports: [{
                message: messages('"cookiename"').invalidNameError,
                severity: utils_types_1.Severity.error
            }],
        serverConfig: { '/': { headers: invalidNameHeader } }
    },
    {
        name: `Cookie value contains invalid characters`,
        reports: [{
                message: messages().invalidValueError,
                severity: utils_types_1.Severity.error
            }],
        serverConfig: { '/': { headers: invalidValueHeader } }
    },
    {
        name: `'Expires' directive contains invalid date format`,
        reports: [{
                message: messages().invalidDateFormatError,
                severity: utils_types_1.Severity.warning
            }],
        serverConfig: { '/': { headers: invalidDateFormatHeader } }
    },
    {
        name: `Header contains trailing semicolon`,
        reports: [{
                message: messages().trailingSemicolonError,
                severity: utils_types_1.Severity.hint
            }],
        serverConfig: { '/': { headers: trailingSemicolonHeader } }
    },
    {
        name: `Header contains multiple errors`,
        reports: [
            {
                message: messages('"cookiename"').invalidNameError,
                severity: utils_types_1.Severity.error
            },
            {
                message: messages('"cookiename"').invalidValueError,
                severity: utils_types_1.Severity.error
            }
        ],
        serverConfig: { '/': { headers: multipleErrorsHeader } }
    },
    {
        name: `Cookie name has '__Host' prefix but doesn't have 'Path' directive`,
        reports: [{
                message: messages().noPathHasHostPrefixError,
                severity: utils_types_1.Severity.error
            }],
        serverConfig: { '/': { headers: noPathHostPrefixHeader } }
    },
    {
        name: `Cookie name has '__Host' prefix but has 'Domain' directive set`,
        reports: [{
                message: messages().hasDomainHostPrefixError,
                severity: utils_types_1.Severity.error
            }],
        serverConfig: { '/': { headers: hasDomainHostPrefixHeader } }
    }
];
const olderBrowserOnlyTests = [
    {
        name: `'Max-Age' only in old browsers (older browsers only)`,
        reports: [{
                message: messages().maxAgeNoExpireWarning,
                severity: utils_types_1.Severity.error
            }],
        serverConfig: { '/': { headers: maxAgeOnlyHeader } }
    },
    {
        name: `Both 'Max-Age' and 'Expires' exist in new browsers (older browsers only)`,
        serverConfig: { '/': { headers: bothMaxAgeAndExpireHeader } }
    },
    {
        name: `'Expires' only in new browsers (older browsers only)`,
        serverConfig: { '/': { headers: expiresOnlyHeader } }
    },
    {
        name: `No 'Max-Age' or 'Expires' in new browsers (older browsers only)`,
        serverConfig: { '/': { headers: standardHeader } }
    }
];
const newBrowserOnlyTests = [
    {
        name: `Both 'Max-Age' and 'Expires' exist in new browsers (new browsers only)`,
        reports: [{
                message: messages().maxAgePrecedenceWarning,
                severity: utils_types_1.Severity.hint
            }],
        serverConfig: { '/': { headers: bothMaxAgeAndExpireHeader } }
    },
    {
        name: `'Max-Age' only in new browsers`,
        serverConfig: { '/': { headers: maxAgeOnlyHeader } }
    },
    {
        name: `'Expires' only in new browsers (new browsers only)`,
        serverConfig: { '/': { headers: expiresOnlyHeader } }
    },
    {
        name: `No 'Max-Age' or 'Expires' in new browsers (new browsers only)`,
        serverConfig: { '/': { headers: standardHeader } }
    }
];
const oldAndNewBrowsersTest = [
    {
        name: `'Max-Age' only in old browsers (old and new browsers)`,
        reports: [{
                message: messages().maxAgeNoExpireWarning,
                severity: utils_types_1.Severity.error
            }],
        serverConfig: { '/': { headers: maxAgeOnlyHeader } }
    },
    {
        name: `Both 'Max-Age' and 'Expires' exist in new browsers (old and new browsers)`,
        serverConfig: { '/': { headers: bothMaxAgeAndExpireHeader } }
    },
    {
        name: `'Expires' only in new browsers (old and new browsers)`,
        serverConfig: { '/': { headers: expiresOnlyHeader } }
    },
    {
        name: `No 'Max-Age' or 'Expires' in new browsers (old and new browsers)`,
        serverConfig: { '/': { headers: standardHeader } }
    }
];
utils_tests_helpers_1.testHint(hintPath, defaultTests, { https: true });
utils_tests_helpers_1.testHint(hintPath, newBrowserOnlyTests, {
    browserslist: [
        '> 1%',
        'last 2 versions'
    ],
    https: true
});
utils_tests_helpers_1.testHint(hintPath, olderBrowserOnlyTests, {
    browserslist: [
        'ie 6', 'ie 7'
    ],
    https: true
});
utils_tests_helpers_1.testHint(hintPath, oldAndNewBrowsersTest, {
    browserslist: [
        'ie >= 6',
        'last 2 versions'
    ],
    https: true
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi90ZXN0cy90ZXN0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1FQUE0RTtBQUM1RSxtREFBNkM7QUFFN0MsTUFBTSxRQUFRLEdBQUcsaUNBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUV6QyxXQUFXO0FBQ1gsTUFBTSxTQUFTLEdBQUcsQ0FBQyxNQUFjLEVBQUUsRUFBRTtJQUNqQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxDQUFDO0FBQ3BDLENBQUMsQ0FBQztBQUVGLDBCQUEwQjtBQUMxQixNQUFNLHVCQUF1QixHQUFHLFNBQVMsQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO0FBQ3hGLE1BQU0sY0FBYyxHQUFHLFNBQVMsQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO0FBQzdFLE1BQU0sdUJBQXVCLEdBQUcsU0FBUyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7QUFDdEYsTUFBTSw4QkFBOEIsR0FBRyxTQUFTLENBQUMsdURBQXVELENBQUMsQ0FBQztBQUMxRyxNQUFNLDRCQUE0QixHQUFHLFNBQVMsQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO0FBRTFGLDBCQUEwQjtBQUMxQixNQUFNLHVCQUF1QixHQUFHLFNBQVMsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0FBQ3pFLE1BQU0sc0JBQXNCLEdBQUcsU0FBUyxDQUFDLG9EQUFvRCxDQUFDLENBQUM7QUFDL0YsTUFBTSxjQUFjLEdBQUcsU0FBUyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7QUFDckUsTUFBTSxnQkFBZ0IsR0FBRyxTQUFTLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztBQUVyRSxNQUFNLGlCQUFpQixHQUFHLFNBQVMsQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO0FBQ2xGLE1BQU0sa0JBQWtCLEdBQUcsU0FBUyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7QUFDbEYsTUFBTSx1QkFBdUIsR0FBRyxTQUFTLENBQUMsK0VBQStFLENB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