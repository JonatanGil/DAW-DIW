"use strict";
/**
 * @fileoverview This hint validates the `set-cookie` header and confirms that it is sent with `Secure` and `HttpOnly` directive over HTTPS.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const utils_debug_1 = require("@hint/utils-debug");
const utils_string_1 = require("@hint/utils-string");
const utils_network_1 = require("@hint/utils-network");
const utils_types_1 = require("@hint/utils-types");
const meta_1 = require("./meta");
const i18n_import_1 = require("./i18n.import");
const debug = utils_debug_1.debug(__filename);
/*
 * ------------------------------------------------------------------------------
 * Public
 * ------------------------------------------------------------------------------
 */
class ValidateSetCookieHeaderHint {
    constructor(context) {
        /** If targetBrowsers contain ie 6, ie 7 or ie 8 */
        let supportOlderBrowsers;
        /**
         * A collection of accepted attributes
         * See https://stackoverflow.com/questions/19792038/what-does-priority-high-mean-in-the-set-cookie-header for details about the `priority` attribute.
         */
        const acceptedCookieAttributes = ['expires', 'max-age', 'domain', 'path', 'secure', 'httponly', 'samesite', 'priority'];
        /**
         * A collection of illegal characters in cookie name
         * Reference: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#Directives
         */
        const illegalCookieNameChars = '()<>@,;:\"/[]?={}'; // eslint-disable-line no-useless-escape
        /**
         * A collection of illegal characters in cookie value
         * Reference: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#Directives
         */
        const illegalCookieValueChars = ',;"/';
        /** Header name used in report */
        const headerName = 'set-cookie';
        /** Trim double quote from the value string. */
        const unquote = (value) => {
            return value.replace(/(^")|("$)/g, '');
        };
        /** Normalize the string before the first `=`, concat and unquote the strings after the first `=`. */
        const normalizeAfterSplitByEqual = (splitResult) => {
            const [key, ...value] = splitResult;
            return [utils_string_1.normalizeString(key), unquote(value.join('='))];
        };
        /**
         * `Set-Cookie` header parser based on the algorithm used by a user agent defined in the spec:
         * https://tools.ietf.org/html/rfc6265#section-5.2.1
         */
        const parse = (setCookieValue) => {
            const [nameValuePair, ...directivePairs] = setCookieValue.split(';');
            const [cookieName, cookieValue] = normalizeAfterSplitByEqual(nameValuePair.split('='));
            const setCookie = {
                name: cookieName,
                value: cookieValue
            };
            const errors = [];
            if (directivePairs[directivePairs.length - 1] === '') {
                errors.push({
                    message: i18n_import_1.getMessage('noTrilingSemicolon', context.language, [headerName, setCookie.name]),
                    severity: utils_types_1.Severity.hint
                });
                directivePairs.pop(); // remove the empty one to continue the parsing
            }
            directivePairs.forEach((part) => {
                const [directiveKey, directiveValue] = normalizeAfterSplitByEqual(part.split('='));
                let ok = true;
                if (!acceptedCookieAttributes.includes(directiveKey)) {
                    errors.push({
                        message: i18n_import_1.getMessage('unknownAttribute', context.language, [headerName, directiveKey]),
                        severity: utils_types_1.Severity.warning
                    });
                    ok = false;
                }
                if (setCookie[directiveKey]) {
                    errors.push({
                        message: i18n_import_1.getMessage('duplicatedDirective', context.language, [headerName, directiveKey]),
                        severity: utils_types_1.Severity.warning
                    });
                    ok = false;
                }
                if (ok) {
                    setCookie[directiveKey] = directiveValue || true;
                }
            });
            return { errors, setCookie };
        };
        const validASCII = (string) => {
            return (/^[\x00-\x7F]+$/).test(string); // eslint-disable-line no-control-regex
        };
        /**
         * Validate cookie name or value string.
         * https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie
         */
        const validString = (name, illegalChars) => {
            const includesIllegalChars = illegalChars.split('').some((char) => {
                return name.includes(char);
            });
            const includesWhiteSpace = (/\s/g).test(name);
            return validASCII(name) && !includesIllegalChars && !includesWhiteSpace;
        };
        /** Validate cookie name-value string. */
        const validateNameAndValue = (parsedSetCookie) => {
            const cookieName = parsedSetCookie.name;
            const errors = [];
            const noNameValueStringError = i18n_import_1.getMessage('noNameValueString', context.language, headerName);
            const invalidNameError = i18n_import_1.getMessage('invalidName', context.language, [headerName, cookieName]);
            const invalidValueError = i18n_import_1.getMessage('invalidValue', context.language, [headerName, cookieName]);
            const severity = utils_types_1.Severity.error;
            // Check name-value-string exists and it is before the first `;`.
            if (!cookieName || acceptedCookieAttributes.includes(cookieName)) {
                errors.push({ message: noNameValueStringError, severity });
                return errors;
            }
            // Validate cookie name.
            if (!validString(cookieName, illegalCookieNameChars)) {
                errors.push({ message: invalidNameError, severity });
            }
            // Validate cookie value.
            if (!validString(parsedSetCookie.value, illegalCookieValueChars)) {
                errors.push({ message: invalidValueError, severity });
            }
            return errors;
        };
        /** Validate cookie name prefixes. */
        const validatePrefixes = (parsedSetCookie) => {
            const cookieName = parsedSetCookie.name;
            const resource = parsedSetCookie.resource || '';
            const errors = [];
            const hasPrefixHttpError = i18n_import_1.getMessage('hasPrefixHttp', context.language, headerName);
            const noPathHasHostPrefixError = i18n_import_1.getMessage('noPathHasHostPrefix', context.language, headerName);
            const hasDomainHostPrefixError = i18n_import_1.getMessage('hasDomainHostPrefix', context.language, headerName);
            if ((cookieName.startsWith('__secure-') || cookieName.startsWith('__host-')) && !utils_network_1.isHTTPS(resource)) {
                errors.push({ message: hasPrefixHttpError, severity: utils_types_1.Severity.error });
            }
            if (cookieName.startsWith('__host-')) {
                if (!parsedSetCookie.path || parsedSetCookie.path !== '/') {
                    errors.push({ message: noPathHasHostPrefixError, severity: utils_types_1.Severity.error });
                }
                if (parsedSetCookie.domain) {
                    errors.push({ message: hasDomainHostPrefixError, severity: utils_types_1.Severity.error });
                }
            }
            return errors;
        };
        /** Validate `Secure` and `HttpOnly` attributes. */
        const validateSecurityAttributes = (parsedSetCookie) => {
            const cookieName = parsedSetCookie.name;
            const resource = parsedSetCookie.resource || '';
            const errors = [];
            const hasSecureHttpError = i18n_import_1.getMessage('hasSecureHttp', context.language, resource);
            const noSecureError = i18n_import_1.getMessage('noSecure', context.language, [headerName, cookieName]);
            const noHttpOnlyError = i18n_import_1.getMessage('noHttpOnly', context.language, [headerName, cookieName]);
            // Check against `Secure` directive if sites are insecure.
            if (!utils_network_1.isHTTPS(resource) && parsedSetCookie.secure) {
                errors.push({ message: hasSecureHttpError, severity: utils_types_1.Severity.error });
                return errors;
            }
            // Check for `Secure` directive if sites are secure.
            if (!parsedSetCookie.secure) {
                errors.push({ message: noSecureError, severity: utils_types_1.Severity.error });
            }
            // Check for `httpOnly` directive.
            if (!parsedSetCookie.httponly) {
                errors.push({ message: noHttpOnlyError, severity: utils_types_1.Severity.warning });
            }
            return errors;
        };
        /** Validate `Expire` date format. */
        const validateExpireDate = (parsedSetCookie) => {
            const cookieName = parsedSetCookie.name;
            const errors = [];
            if (!parsedSetCookie.expires) {
                return errors;
            }
            // Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Date
            const utcTimeString = new Date(parsedSetCookie.expires).toUTCString();
            const invalidDateError = i18n_import_1.getMessage('invalidDate', context.language, [headerName, cookieName]);
            const invalidDateFormatError = i18n_import_1.getMessage('invalidDateFormat', context.language, [headerName, cookieName, utcTimeString]);
            if (utcTimeString === 'Invalid Date') {
                errors.push({ message: invalidDateError, severity: utils_types_1.Severity.error });
                return errors;
            }
            if (utils_string_1.normalizeString(utcTimeString) !== utils_string_1.normalizeString(parsedSetCookie.expires)) {
                errors.push({ message: invalidDateFormatError, severity: utils_types_1.Severity.warning });
            }
            return errors;
        };
        /** Validate the usage of `Max-Age` and `Expires` based on users' browser support matrix */
        const validateMaxAgeAndExpires = (parsedSetCookie) => {
            const cookieName = parsedSetCookie.name;
            const errors = [];
            const maxAgeCompatibilityMessage = i18n_import_1.getMessage('maxAgeCompatibility', context.language, [headerName, cookieName]);
            const maxAgeAndExpireDuplicateMessage = i18n_import_1.getMessage('maxAgeAndExpireDuplicate', context.language);
            if (supportOlderBrowsers) {
                /*
                 * When targetBrowsers contains IE 6, IE 7 or IE 8:
                 * `max-age` can't be used alone.
                 */
                if (parsedSetCookie['max-age'] && !parsedSetCookie.expires) {
                    errors.push({ message: maxAgeCompatibilityMessage, severity: utils_types_1.Severity.error });
                }
                return errors;
            }
            /*
             * When targetBrowsers only contains modern browsers:
             * `max-age` takes precedence so `expires` shouldn't be used.
             * Reference: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#Directives
             */
            if (parsedSetCookie['max-age'] && parsedSetCookie.expires) {
                errors.push({ message: maxAgeAndExpireDuplicateMessage, severity: utils_types_1.Severity.hint });
            }
            return errors;
        };
        const loadHintConfigs = () => {
            supportOlderBrowsers = ['ie 6', 'ie 7', 'ie 8'].some((e) => {
                return context.targetedBrowsers.includes(e);
            });
        };
        const validate = ({ element, resource, response }) => {
            const defaultValidators = [
                validateNameAndValue,
                validatePrefixes,
                validateSecurityAttributes,
                validateExpireDate,
                validateMaxAgeAndExpires
            ];
            // This check does not apply if URI starts with protocols others than http/https.
            if (!utils_network_1.isRegularProtocol(resource)) {
                debug(`Check does not apply for URI: ${resource}`);
                return;
            }
            const rawSetCookieHeaders = response.headers && response.headers['set-cookie'] || '';
            if (!rawSetCookieHeaders) {
                return;
            }
            /**  The `chrome` connector concatenates all `set-cookie` headers to one string. */
            const setCookieHeaders = Array.isArray(rawSetCookieHeaders) ? rawSetCookieHeaders : rawSetCookieHeaders.split(/\n|\r\n/);
            const reportBatch = (errorMessages, codeLanguage, codeSnippet) => {
                errorMessages.forEach(({ message, severity }) => {
                    context.report(resource, message, {
                        codeLanguage,
                        codeSnippet,
                        element,
                        severity
                    });
                });
            };
            for (const setCookieHeader of setCookieHeaders) {
                const codeSnippet = `Set-Cookie: ${setCookieHeader}`;
                const codeLanguage = 'http';
                const { errors, setCookie: parsedSetCookie } = parse(setCookieHeader);
                if (errors) {
                    for (const { message, severity } of errors) {
                        context.report(resource, message, {
                            codeLanguage,
                            codeSnippet,
                            element,
                            severity
                        });
                    }
                }
                parsedSetCookie.resource = resource;
                defaultValidators.every((defaultValidator) => {
                    const messages = defaultValidator(parsedSetCookie);
                    if (messages.length) {
                        reportBatch(messages, codeLanguage, codeSnippet);
                        return false;
                    }
                    return true;
                });
            }
        };
        loadHintConfigs();
        context.on('fetch::end::*', validate);
    }
}
exports.default = ValidateSetCookieHeaderHint;
ValidateSetCookieHeaderHint.meta = meta_1.default;
//# sourceMappingURL=data:application/json;base64,