"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const acorn_1 = require("acorn");
const utils_debug_1 = require("@hint/utils-debug");
const content_type_1 = require("@hint/utils/dist/src/content-type");
const types_1 = require("hint/dist/src/lib/types");
const walk_1 = require("./walk");
const debug = utils_debug_1.debug(__filename);
const jsx = require('acorn-jsx');
const jsParser = acorn_1.Parser.extend();
const jsxParser = jsx ? acorn_1.Parser.extend(jsx()) : acorn_1.Parser.extend();
class JavascriptParser extends types_1.Parser {
    constructor(engine) {
        super(engine, 'javascript');
        engine.on('fetch::end::script', this.parseJavascript.bind(this));
        engine.on('fetch::end::unknown', this.onFetchUnknown.bind(this));
        engine.on('element::script', this.parseJavascriptTag.bind(this));
    }
    async emitScript(parser, sourceCode, resource, element) {
        try {
            await this.engine.emitAsync(`parse::start::javascript`, { resource });
            const options = { locations: true, ranges: true };
            const ast = parser.parse(sourceCode, options);
            const tokens = [...parser.tokenizer(sourceCode, options)];
            await walk_1.combineWalk(async (walk) => {
                await this.engine.emitAsync(`parse::end::javascript`, {
                    ast,
                    element,
                    resource,
                    sourceCode,
                    tokens,
                    walk
                });
            });
        }
        catch (err) {
            debug(`Error parsing JS code (${err}): ${sourceCode}`);
        }
    }
    async onFetchUnknown(fetchEnd) {
        if (fetchEnd.response.mediaType !== 'text/jsx') {
            return;
        }
        const code = fetchEnd.response.body.content;
        const resource = fetchEnd.resource;
        await this.emitScript(jsxParser, code, resource, null);
    }
    async parseJavascript(fetchEnd) {
        const code = fetchEnd.response.body.content;
        const resource = fetchEnd.resource;
        await this.emitScript(jsParser, code, resource, null);
    }
    hasSrcAttribute(element) {
        const src = element.getAttribute('src');
        return !!src;
    }
    isJavaScriptType(element) {
        const type = content_type_1.determineMediaTypeForScript(element);
        return !!type;
    }
    async parseJavascriptTag({ element, resource }) {
        if (this.hasSrcAttribute(element)) {
            // Ignore because this will be (or have been) processed in the event 'fetch::end::script'.
            return;
        }
        if (!this.isJavaScriptType(element)) {
            // Ignore if it is not javascript.
            return;
        }
        await this.emitScript(jsParser, element.innerHTML, resource, element);
    }
}
exports.default = JavascriptParser;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3BhcnNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUF3QztBQUd4QyxtREFBK0M7QUFFL0Msb0VBQWdGO0FBQ2hGLG1EQUEwRjtBQUkxRixpQ0FBcUM7QUFJckMsTUFBTSxLQUFLLEdBQUcsbUJBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUM1QixNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDakMsTUFBTSxRQUFRLEdBQUcsY0FBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ2pDLE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsY0FBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7QUFFL0QsTUFBcUIsZ0JBQWlCLFNBQVEsY0FBMkI7SUFDckUsWUFBbUIsTUFBNEI7UUFDM0MsS0FBSyxDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsQ0FBQztRQUU1QixNQUFNLENBQUMsRUFBRSxDQUFDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDakUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2pFLE1BQU0sQ0FBQyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFFTyxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQXFCLEVBQUUsVUFBa0IsRUFBRSxRQUFnQixFQUFFLE9BQTJCO1FBQzdHLElBQUk7WUFDQSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLDBCQUEwQixFQUFFLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUV0RSxNQUFNLE9BQU8sR0FBWSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDO1lBQzNELE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBUyxDQUFDO1lBQ3RELE1BQU0sTUFBTSxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBRTFELE1BQU0sa0JBQVcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUU7Z0JBQzdCLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsd0JBQXdCLEVBQUU7b0JBQ2xELEdBQUc7b0JBQ0gsT0FBTztvQkFDUCxRQUFRO29CQUNSLFVBQVU7b0JBQ1YsTUFBTTtvQkFDTixJQUFJO2lCQUNQLENBQUMsQ0FBQztZQUNQLENBQUMsQ0FBQyxDQUFDO1NBRU47UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNWLEtBQUssQ0FBQywwQkFBMEIsR0FBRyxNQUFNLFVBQVUsRUFBRSxDQUFDLENBQUM7U0FDMUQ7SUFDTCxDQUFDO0lBRU8sS0FBSyxDQUFDLGNBQWMsQ0FBQyxRQUFrQjtRQUMzQyxJQUFJLFFBQVEsQ0FBQyxRQUFRLENBQUMsU0FBUyxLQUFLLFVBQVUsRUFBRTtZQUM1QyxPQUFPO1NBQ1Y7UUFFRCxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDNUMsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQztRQUVuQyxNQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVPLEtBQUssQ0FBQyxlQUFlLENBQUMsUUFBa0I7UUFDNUMsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQzVDLE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUM7UUFFbkMsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFTyxlQUFlLENBQUMsT0FBb0I7UUFDeEMsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV4QyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFDakIsQ0FBQztJQUdPLGdCQUFnQixDQUFDLE9BQW9CO1FBQ3pDLE1BQU0sSUFBSSxHQUFHLDBDQUEyQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRWxELE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNsQixDQUFDO0lBRU8sS0FBSyxDQUFDLGtCQUFrQixDQUFDLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBZ0I7UUFDaEUsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQy9CLDBGQUEwRjtZQUMxRixPQUFPO1NBQ1Y7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ2pDLGtDQUFrQztZQUNsQyxPQUFPO1NBQ1Y7UUFFRCxNQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzFFLENBQUM7Q0FDSjtBQTdFRCxtQ0E2RUMifQ==