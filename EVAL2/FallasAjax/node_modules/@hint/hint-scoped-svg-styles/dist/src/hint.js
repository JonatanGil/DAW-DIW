"use strict";
/**
 * @fileoverview Scoped SVG Styles checks if SVG styles affect any other elements outside the svg.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const utils_debug_1 = require("@hint/utils-debug");
const utils_types_1 = require("@hint/utils-types");
const utils_css_1 = require("@hint/utils-css");
const meta_1 = require("./meta");
const i18n_import_1 = require("./i18n.import");
const debug = utils_debug_1.debug(__filename);
const findParentSVGElement = (element) => {
    if (!element.parentElement) {
        return null;
    }
    if (element.parentElement.nodeName === 'svg') {
        return element.parentElement;
    }
    return findParentSVGElement(element.parentElement);
};
const isOutsideParentSVG = (parentSVG) => {
    return (element) => {
        const elementsParentSVG = findParentSVGElement(element);
        if (!elementsParentSVG) {
            return true;
        }
        if (!elementsParentSVG.isSame(parentSVG)) {
            return true;
        }
        return false;
    };
};
/*
 * ------------------------------------------------------------------------------
 * Public
 * ------------------------------------------------------------------------------
 */
class ScopedSvgStylesHint {
    constructor(context) {
        /** Generate a report message from elements matched outside the SVG. */
        const formatRuleMessage = (numberOfElementsOutsideSVG) => {
            return i18n_import_1.getMessage('reportRuleImpacting', context.language, [
                `${numberOfElementsOutsideSVG}`
            ]);
        };
        const formatElementMessage = (codeSnippet) => {
            return i18n_import_1.getMessage('reportImpactedElement', context.language, [
                codeSnippet
            ]);
        };
        const validateStyle = ({ ast, element, resource }) => {
            // proceed only if it is inline style
            if (!element) {
                return;
            }
            const parentSVG = findParentSVGElement(element);
            // proceed only if style is inside svg element
            if (!parentSVG) {
                return;
            }
            debug('Validating hint scoped-svg-styles');
            ast.walkRules((rule) => {
                const selectors = rule.selectors;
                for (const selector of selectors) {
                    const matchingElements = element.ownerDocument.querySelectorAll(selector);
                    const matchingElementsOutsideParentSVG = matchingElements.filter(isOutsideParentSVG(parentSVG));
                    if (matchingElementsOutsideParentSVG.length) {
                        const message = formatRuleMessage(matchingElementsOutsideParentSVG.length);
                        const location = utils_css_1.getCSSLocationFromNode(rule);
                        const codeSnippet = utils_css_1.getCSSCodeSnippet(rule);
                        context.report(resource, message, {
                            codeLanguage: 'css',
                            codeSnippet,
                            element,
                            location,
                            severity: utils_types_1.Severity.error
                        });
                        let maxReportsPerCSSRule = Infinity;
                        if (context.hintOptions && context.hintOptions.maxReportsPerCSSRule !== undefined) {
                            maxReportsPerCSSRule = context.hintOptions.maxReportsPerCSSRule;
                        }
                        for (let i = 0; (i < matchingElementsOutsideParentSVG.length && i < maxReportsPerCSSRule); i++) {
                            context.report(resource, formatElementMessage(codeSnippet), {
                                element: matchingElementsOutsideParentSVG[i],
                                severity: utils_types_1.Severity.error
                            });
                        }
                    }
                }
            });
        };
        context.on('parse::end::css', validateStyle);
    }
}
exports.default = ScopedSvgStylesHint;
ScopedSvgStylesHint.meta = meta_1.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGludC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oaW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7QUFJSCxtREFBK0M7QUFFL0MsbURBQTZDO0FBRzdDLCtDQUE0RTtBQUc1RSxpQ0FBMEI7QUFDMUIsK0NBQTJDO0FBRTNDLE1BQU0sS0FBSyxHQUFvQixtQkFBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBRTdDLE1BQU0sb0JBQW9CLEdBQUcsQ0FBQyxPQUFvQixFQUFzQixFQUFFO0lBQ3RFLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFO1FBQ3hCLE9BQU8sSUFBSSxDQUFDO0tBQ2Y7SUFFRCxJQUFJLE9BQU8sQ0FBQyxhQUFhLENBQUMsUUFBUSxLQUFLLEtBQUssRUFBRTtRQUMxQyxPQUFPLE9BQU8sQ0FBQyxhQUFhLENBQUM7S0FDaEM7SUFFRCxPQUFPLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN2RCxDQUFDLENBQUM7QUFFRixNQUFNLGtCQUFrQixHQUFHLENBQUMsU0FBc0IsRUFBRSxFQUFFO0lBQ2xELE9BQU8sQ0FBQyxPQUFvQixFQUFXLEVBQUU7UUFDckMsTUFBTSxpQkFBaUIsR0FBRyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV4RCxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDcEIsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUNELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDdEMsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUMsQ0FBQztBQUNOLENBQUMsQ0FBQztBQUVGOzs7O0dBSUc7QUFFSCxNQUFxQixtQkFBbUI7SUFHcEMsWUFBbUIsT0FBaUM7UUFDaEQsdUVBQXVFO1FBQ3ZFLE1BQU0saUJBQWlCLEdBQUcsQ0FBQywwQkFBa0MsRUFBVSxFQUFFO1lB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