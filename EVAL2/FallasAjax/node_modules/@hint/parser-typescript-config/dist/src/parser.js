"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const lodash_1 = require("lodash");
const utils_fs_1 = require("@hint/utils-fs");
const utils_json_1 = require("@hint/utils-json");
const hint_1 = require("hint");
class TypeScriptConfigParser extends hint_1.Parser {
    constructor(engine) {
        super(engine, 'typescript-config');
        this.schemaPath = path.join(__dirname, 'schema.json');
        this.schema = utils_fs_1.loadJSONFile(this.schemaPath);
        engine.on('fetch::end::*', this.parseTypeScript.bind(this));
    }
    async validateSchema(config, resource, result) {
        const validationResult = utils_json_1.validate(this.schema, config, result.getLocation);
        const valid = validationResult.valid;
        if (!valid) {
            await this.engine.emitAsync(`parse::error::typescript-config::schema`, {
                error: new Error('Invalid TypeScript configuration'),
                errors: validationResult.errors,
                groupedErrors: validationResult.groupedErrors,
                prettifiedErrors: validationResult.prettifiedErrors,
                resource
            });
        }
        return validationResult;
    }
    async parseTypeScript(fetchEnd) {
        const resource = fetchEnd.resource;
        const fileName = path.basename(resource);
        /**
         * Match examples:
         * tsconfig.json
         * tsconfig.improved.json
         * tsconfig.whatever.json
         *
         * Not Match examples:
         * tsconfigimproved.json
         * anythingelse.json
         * tsconfig.schema.json
         */
        if (!fileName.match(/^tsconfig\.([^.]*\.)?json$/gi) || fileName === 'tsconfig.schema.json') {
            return;
        }
        await this.engine.emitAsync(`parse::start::typescript-config`, { resource });
        let result;
        try {
            result = utils_json_1.parseJSON(fetchEnd.response.body.content);
            const originalConfig = lodash_1.cloneDeep(result.data);
            const config = utils_json_1.finalConfig(result.data, resource);
            if (config instanceof Error) {
                await this.engine.emitAsync(`parse::error::typescript-config::extends`, {
                    error: config,
                    getLocation: result.getLocation,
                    resource: config.resource
                });
                return;
            }
            if (!config) {
                return;
            }
            // Validate if the TypeScript configuration is valid.
            const validationResult = await this.validateSchema(config, resource, result);
            if (!validationResult.valid) {
                return;
            }
            await this.engine.emitAsync(`parse::end::typescript-config`, {
                config: validationResult.data,
                getLocation: result.getLocation,
                mergedConfig: config,
                originalConfig,
                resource
            });
        }
        catch (err) {
            await this.engine.emitAsync(`parse::error::typescript-config::json`, {
                error: err,
                resource
            });
        }
    }
}
exports.default = TypeScriptConfigParser;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3BhcnNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUE2QjtBQUU3QixtQ0FBbUM7QUFFbkMsNkNBQThDO0FBQzlDLGlEQUF5RztBQUN6RywrQkFBZ0Q7QUFNaEQsTUFBcUIsc0JBQXVCLFNBQVEsYUFBOEI7SUFJOUUsWUFBbUIsTUFBc0M7UUFDckQsS0FBSyxDQUFDLE1BQU0sRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO1FBSC9CLGVBQVUsR0FBVyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUs3RCxJQUFJLENBQUMsTUFBTSxHQUFHLHVCQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRTVDLE1BQU0sQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVPLEtBQUssQ0FBQyxjQUFjLENBQUMsTUFBd0IsRUFBRSxRQUFnQixFQUFFLE1BQW1CO1FBQ3hGLE1BQU0sZ0JBQWdCLEdBQUcscUJBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFM0UsTUFBTSxLQUFLLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxDQUFDO1FBRXJDLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDUixNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLHlDQUF5QyxFQUFFO2dCQUNuRSxLQUFLLEVBQUUsSUFBSSxLQUFLLENBQUMsa0NBQWtDLENBQUM7Z0JBQ3BELE1BQU0sRUFBRSxnQkFBZ0IsQ0FBQyxNQUFNO2dCQUMvQixhQUFhLEVBQUUsZ0JBQWdCLENBQUMsYUFBYTtnQkFDN0MsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsZ0JBQWdCO2dCQUNuRCxRQUFRO2FBQ1gsQ0FBQyxDQUFDO1NBQ047UUFFRCxPQUFPLGdCQUFnQixDQUFDO0lBQzVCLENBQUM7SUFFTyxLQUFLLENBQUMsZUFBZSxDQUFDLFFBQWtCO1FBQzVDLE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUM7UUFDbkMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUV6Qzs7Ozs7Ozs7OztXQVVHO1FBQ0gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsOEJBQThCLENBQUMsSUFBSSxRQUFRLEtBQUssc0JBQXNCLEVBQUU7WUFDeEYsT0FBTztTQUNWO1FBRUQsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxpQ0FBaUMsRUFBRSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFFN0UsSUFBSSxNQUFtQixDQUFDO1FBRXhCLElBQUk7WUFDQSxNQUFNLEdBQUcsc0JBQVMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUVuRCxNQUFNLGNBQWMsR0FBRyxrQkFBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUU5QyxNQUFNLE1BQU0sR0FBRyx3QkFBVyxDQUFtQixNQUFNLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBRXBFLElBQUksTUFBTSxZQUFZLEtBQUssRUFBRTtnQkFDekIsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQywwQ0FBMEMsRUFDbEU7b0JBQ0ksS0FBSyxFQUFFLE1BQU07b0JBQ2IsV0FBVyxFQUFFLE1BQU0sQ0FBQyxXQUFXO29CQUMvQixRQUFRLEVBQUUsTUFBTSxDQUFDLFFBQVE7aUJBQzVCLENBQUMsQ0FBQztnQkFFUCxPQUFPO2FBQ1Y7WUFFRCxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNULE9BQU87YUFDVjtZQUVELHFEQUFxRDtZQUNyRCxNQUFNLGdCQUFnQixHQUFHLE1BQU0sSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBRTdFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUU7Z0JBQ3pCLE9BQU87YUFDVjtZQUVELE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsK0JBQStCLEVBQUU7Z0JBQ3pELE1BQU0sRUFBRSxnQkFBZ0IsQ0FBQyxJQUFJO2dCQUM3QixXQUFXLEVBQUUsTUFBTSxDQUFDLFdBQVc7Z0JBQy9CLFlBQVksRUFBRSxNQUFNO2dCQUNwQixjQUFjO2dCQUNkLFFBQVE7YUFDWCxDQUFDLENBQUM7U0FDTjtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1YsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyx1Q0FBdUMsRUFBRTtnQkFDakUsS0FBSyxFQUFFLEdBQUc7Z0JBQ1YsUUFBUTthQUNYLENBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQztDQUNKO0FBaEdELHlDQWdHQyJ9