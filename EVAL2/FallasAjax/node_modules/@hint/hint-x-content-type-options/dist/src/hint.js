"use strict";
/**
 * @fileoverview Check if responses are served with the
 * `X-Content-Type-Options` HTTP response header.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * ------------------------------------------------------------------------------
 * Requirements
 * ------------------------------------------------------------------------------
 */
const utils_debug_1 = require("@hint/utils-debug");
const utils_string_1 = require("@hint/utils-string");
const utils_network_1 = require("@hint/utils-network");
const utils_types_1 = require("@hint/utils-types");
const meta_1 = require("./meta");
const i18n_import_1 = require("./i18n.import");
const debug = utils_debug_1.debug(__filename);
/*
 * ------------------------------------------------------------------------------
 * Public
 * ------------------------------------------------------------------------------
 */
class XContentTypeOptionsHint {
    constructor(context) {
        const validate = ({ element, resource, response }) => {
            // This check does not make sense for data URI.
            if (utils_network_1.isDataURI(resource)) {
                debug(`Check does not apply for data URI: ${resource}`);
                return;
            }
            const headerValue = utils_string_1.normalizeString(response.headers && response.headers['x-content-type-options']);
            if (headerValue === null) {
                context.report(resource, i18n_import_1.getMessage('shouldInclude', context.language), {
                    element,
                    severity: utils_types_1.Severity.error
                });
                return;
            }
            if (headerValue !== 'nosniff') {
                context.report(resource, i18n_import_1.getMessage('nosniff', context.language, headerValue), {
                    codeLanguage: 'http',
                    codeSnippet: `X-Content-Type-Options: ${headerValue}`,
                    element,
                    severity: utils_types_1.Severity.error
                });
                return;
            }
            return;
        };
        context.on('fetch::end::*', validate);
    }
}
exports.default = XContentTypeOptionsHint;
XContentTypeOptionsHint.meta = meta_1.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGludC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oaW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7O0FBRUg7Ozs7R0FJRztBQUVILG1EQUErQztBQUMvQyxxREFBcUQ7QUFDckQsdURBQWdEO0FBR2hELG1EQUE2QztBQUM3QyxpQ0FBMEI7QUFDMUIsK0NBQTJDO0FBRTNDLE1BQU0sS0FBSyxHQUFHLG1CQUFDLENBQUMsVUFBVSxDQUFDLENBQUM7QUFFNUI7Ozs7R0FJRztBQUVILE1BQXFCLHVCQUF1QjtJQUd4QyxZQUFtQixPQUFvQjtRQUNuQyxNQUFNLFFBQVEsR0FBRyxDQUFDLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQVksRUFBRSxFQUFFO1lBQzNELCtDQUErQztZQUUvQyxJQUFJLHlCQUFTLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQ3JCLEtBQUssQ0FBQyxzQ0FBc0MsUUFBUSxFQUFFLENBQUMsQ0FBQztnQkFFeEQsT0FBTzthQUNWO1lBRUQsTUFBTSxXQUFXLEdBQWtCLDhCQUFlLENBQUMsUUFBUSxDQUFDLE9BQU8sSUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQztZQUVuSCxJQUFJLFdBQVcsS0FBSyxJQUFJLEVBQUU7Z0JBQ3RCLE9BQU8sQ0FBQyxNQUFNLENBQ1YsUUFBUSxFQUNSLHdCQUFVLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFDN0M7b0JBQ0ksT0FBTztvQkFDUCxRQUFRLEVBQUUsc0JBQVEsQ0FBQyxLQUFLO2lCQUMzQixDQUFDLENBQUM7Z0JBRVAsT0FBTzthQUNWO1lBRUQsSUFBSSxXQUFXLEtBQUssU0FBUyxFQUFFO2dCQUMzQixPQUFPLENBQUMsTUFBTSxDQUNWLFFBQVEsRUFDUix3QkFBVSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxFQUNwRDtvQkFDSSxZQUFZLEVBQUUsTUFBTTtvQkFDcEIsV0FBVyxFQUFFLDJCQUEyQixXQUFXLEVBQUU7b0JBQ3JELE9BQU87b0JBQ1AsUUFBUSxFQUFFLHNCQUFRLENBQUMsS0FBSztpQkFDM0IsQ0FBQyxDQUFDO2dCQUVQLE9BQU87YUFDVjtZQUVELE9BQU87UUFDWCxDQUFDLENBQUM7UUFFRixPQUFPLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUMxQyxDQUFDOztBQTdDTCwwQ0E4Q0M7QUE1QzBCLDRCQUFJLEdBQUcsY0FBSSxDQUFDIn0=