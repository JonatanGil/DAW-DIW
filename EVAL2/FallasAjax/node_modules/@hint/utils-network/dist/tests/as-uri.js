"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const src_1 = require("../src");
ava_1.default('getAsUri returns a URI for `http` protocol', (t) => {
    const uri = src_1.getAsUri('http://www.bing.com/');
    t.is(uri && uri.protocol, 'http:', `getAsUri didn't return a URI with the HTTP protocol`);
});
ava_1.default('getAsUri returns a URI for `https` protocol', (t) => {
    const uri = src_1.getAsUri('https://www.bing.com/');
    t.is(uri && uri.protocol, 'https:', `getAsUri didn't return a URI with the HTTPS protocol`);
});
ava_1.default('getAsUri returns a URI for `file` protocol', (t) => {
    const uri = src_1.getAsUri('file://fixtures/empty.txt');
    t.is(uri && uri.protocol, 'file:', `getAsUri didn't return a URI with the file protocol`);
});
ava_1.default('getAsUri returns a URI for a local file without a protocol', (t) => {
    const uri = src_1.getAsUri(`${__dirname}/fixtures/empty.txt`);
    t.is(uri && uri.protocol, 'file:', `getAsUri didn't return a URI for a local file`);
});
ava_1.default('getAsUri returns a URI for localhost', (t) => {
    const uri = src_1.getAsUri('localhost/test.html');
    t.is(uri && uri.protocol, 'http:', `getAsUri didn't return a URI for localhost`);
});
ava_1.default('getAsUri returns `null` for invalid sources', (t) => {
    const uri = src_1.getAsUri('invalid');
    t.is(uri, null, `getAsUri returned a URI for an invalid source`);
});
ava_1.default('getAsUris drops invalid URLs', (t) => {
    const uris = src_1.getAsUris(['localhost', 'invalid']);
    t.is(uris.length, 1, `getAsUris didn't return the expected number of URIs`);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXMtdXJpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vdGVzdHMvYXMtdXJpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkJBQXVCO0FBRXZCLGdDQUE2QztBQUU3QyxhQUFJLENBQUMsNENBQTRDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtJQUNyRCxNQUFNLEdBQUcsR0FBRyxjQUFRLENBQUMsc0JBQXNCLENBQUMsQ0FBQztJQUU3QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxxREFBcUQsQ0FBQyxDQUFDO0FBQzlGLENBQUMsQ0FBQyxDQUFDO0FBRUgsYUFBSSxDQUFDLDZDQUE2QyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7SUFDdEQsTUFBTSxHQUFHLEdBQUcsY0FBUSxDQUFDLHVCQUF1QixDQUFDLENBQUM7SUFFOUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsc0RBQXNELENBQUMsQ0FBQztBQUNoRyxDQUFDLENBQUMsQ0FBQztBQUVILGFBQUksQ0FBQyw0Q0FBNEMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO0lBQ3JELE1BQU0sR0FBRyxHQUFHLGNBQVEsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0lBRWxELENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLHFEQUFxRCxDQUFDLENBQUM7QUFDOUYsQ0FBQyxDQUFDLENBQUM7QUFFSCxhQUFJLENBQUMsNERBQTRELEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtJQUNyRSxNQUFNLEdBQUcsR0FBRyxjQUFRLENBQUMsR0FBRyxTQUFTLHFCQUFxQixDQUFDLENBQUM7SUFFeEQsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsK0NBQStDLENBQUMsQ0FBQztBQUN4RixDQUFDLENBQUMsQ0FBQztBQUVILGFBQUksQ0FBQyxzQ0FBc0MsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO0lBQy9DLE1BQU0sR0FBRyxHQUFHLGNBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBRTVDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLDRDQUE0QyxDQUFDLENBQUM7QUFDckYsQ0FBQyxDQUFDLENBQUM7QUFFSCxhQUFJLENBQUMsNkNBQTZDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtJQUN0RCxNQUFNLEdBQUcsR0FBRyxjQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFaEMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLCtDQUErQyxDQUFDLENBQUM7QUFDckUsQ0FBQyxDQUFDLENBQUM7QUFFSCxhQUFJLENBQUMsOEJBQThCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtJQUN2QyxNQUFNLElBQUksR0FBRyxlQUFTLENBQUMsQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUVqRCxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLHFEQUFxRCxDQUFDLENBQUM7QUFDaEYsQ0FBQyxDQUFDLENBQUMifQ==