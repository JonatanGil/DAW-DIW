"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const url = require("url");
const url_1 = require("url"); // this is necessary to avoid TypeScript mixes types.
const fileUrl = require("file-url");
const compact = require("lodash/compact"); // `require` used because `lodash/compact` exports a function
const utils_debug_1 = require("@hint/utils-debug");
const utils_fs_1 = require("@hint/utils-fs");
const logger = require("@hint/utils/dist/src/logging");
const debug = utils_debug_1.debug(__filename);
/**
 * Receives a string and returns a valid Uris that are either:
 * * file:// if they start with the protocol or exist in the file system
 * * http(s):// if they start with this protocol or are not a valid file
 * * null if not valid
 */
exports.getAsUri = (source) => {
    let target;
    try {
        target = new url_1.URL(source);
    }
    catch (err) {
        /* istanbul ignore next */
        { // eslint-disable-line no-lone-blocks
            target = null;
        }
    }
    const protocol = target ? target.protocol : null;
    /* istanbul ignore else */
    /*
     * If it's a URI.
     * Check if the protocol is HTTP or HTTPS.
     */
    if (protocol === 'http:' || protocol === 'https:' || protocol === 'file:') {
        debug(`Adding valid target: ${target && url.format(target)}`);
        return target;
    }
    /*
     * If it's not a URI
     * If it does exist and it's a regular file.
     */
    if (utils_fs_1.isFile(source) || utils_fs_1.isDirectory(source)) {
        target = new url_1.URL(fileUrl(source));
        debug(`Adding valid target: ${url.format(target)}`);
        return target;
    }
    target = new url_1.URL(`http://${source}`);
    /*
     * And it doesn't exist locally, and is a valid URL:
     * Except for the case of the well known and used `localhost`,
     * for all other cases the `hostname` needs to contain at least
     * a `.`. Private domains should have `http(s)://` in front.
     */
    if (!utils_fs_1.pathExists(source) && (target.hostname === 'localhost' || target.hostname.includes('.'))) {
        debug(`Adding modified target: ${url.format(target)}`);
        return target;
    }
    // If it's not a regular file or looks like a URL, ignore it.
    logger.error(`Ignoring '${source}' as it's not an existing file nor a valid URL`);
    return null;
};
/**
 * Receives an array of string and returns an array of valid Uris that are either:
 * * file:// if they start with the protocol or exist in the file system
 * * http(s):// if they start with this protocol or are not a valid file
 * * null if not valid
 *
 */
exports.getAsUris = (source) => {
    const targets = source.reduce((uris, entry) => {
        const uri = exports.getAsUri(entry);
        if (uri) {
            uris.push(uri);
        }
        return uris;
    }, []);
    return compact(targets);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXMtdXJpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FzLXVyaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJCQUEyQjtBQUMzQiw2QkFBMEIsQ0FBQyxxREFBcUQ7QUFFaEYsb0NBQW9DO0FBQ3BDLDBDQUEyQyxDQUFDLDZEQUE2RDtBQUV6RyxtREFBK0M7QUFDL0MsNkNBQWlFO0FBQ2pFLHVEQUF1RDtBQUV2RCxNQUFNLEtBQUssR0FBb0IsbUJBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUU3Qzs7Ozs7R0FLRztBQUNVLFFBQUEsUUFBUSxHQUFHLENBQUMsTUFBYyxFQUFjLEVBQUU7SUFDbkQsSUFBSSxNQUFrQixDQUFDO0lBRXZCLElBQUk7UUFDQSxNQUFNLEdBQUcsSUFBSSxTQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDNUI7SUFBQyxPQUFPLEdBQUcsRUFBRTtRQUNWLDBCQUEwQjtRQUMxQixFQUFFLHFDQUFxQztZQUNuQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1NBQ2pCO0tBQ0o7SUFFRCxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUVqRCwwQkFBMEI7SUFDMUI7OztPQUdHO0lBQ0gsSUFBSSxRQUFRLEtBQUssT0FBTyxJQUFJLFFBQVEsS0FBSyxRQUFRLElBQUksUUFBUSxLQUFLLE9BQU8sRUFBRTtRQUN2RSxLQUFLLENBQUMsd0JBQXdCLE1BQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUU5RCxPQUFPLE1BQU0sQ0FBQztLQUNqQjtJQUVEOzs7T0FHRztJQUNILElBQUksaUJBQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxzQkFBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ3ZDLE1BQU0sR0FBRyxJQUFJLFNBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNsQyxLQUFLLENBQUMsd0JBQXdCLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRXBELE9BQU8sTUFBTSxDQUFDO0tBQ2pCO0lBRUQsTUFBTSxHQUFHLElBQUksU0FBRyxDQUFDLFVBQVUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUVyQzs7Ozs7T0FLRztJQUNILElBQUksQ0FBQyxxQkFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsS0FBSyxXQUFXLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtRQUMzRixLQUFLLENBQUMsMkJBQTJCLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRXZELE9BQU8sTUFBTSxDQUFDO0tBQ2pCO0lBRUQsNkRBQTZEO0lBQzdELE1BQU0sQ0FBQyxLQUFLLENBQUMsYUFBYSxNQUFNLGdEQUFnRCxDQUFDLENBQUM7SUFFbEYsT0FBTyxJQUFJLENBQUM7QUFDaEIsQ0FBQyxDQUFDO0FBRUY7Ozs7OztHQU1HO0FBQ1UsUUFBQSxTQUFTLEdBQUcsQ0FBQyxNQUFnQixFQUFTLEVBQUU7SUFDakQsTUFBTSxPQUFPLEdBQVUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQVcsRUFBRSxLQUFhLEVBQVMsRUFBRTtRQUN2RSxNQUFNLEdBQUcsR0FBRyxnQkFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTVCLElBQUksR0FBRyxFQUFFO1lBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNsQjtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUVQLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzVCLENBQUMsQ0FBQyJ9