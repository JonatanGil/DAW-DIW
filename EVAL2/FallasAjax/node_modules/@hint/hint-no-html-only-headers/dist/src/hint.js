"use strict";
/**
 * @fileoverview Check if non HTML resources responses contain certain
 * unneeded HTTP headers.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * ------------------------------------------------------------------------------
 * Requirements
 * ------------------------------------------------------------------------------
 */
const utils_debug_1 = require("@hint/utils-debug");
const utils_network_1 = require("@hint/utils-network");
const utils_string_1 = require("@hint/utils-string");
const utils_types_1 = require("@hint/utils-types");
const meta_1 = require("./meta");
const i18n_import_1 = require("./i18n.import");
const debug = utils_debug_1.debug(__filename);
/*
 * ------------------------------------------------------------------------------
 * Public
 * ------------------------------------------------------------------------------
 */
class NoHtmlOnlyHeadersHint {
    constructor(context) {
        let unneededHeaders = [
            'content-security-policy',
            'feature-policy',
            'x-content-security-policy',
            'x-ua-compatible',
            'x-webkit-csp',
            'x-xss-protection'
        ];
        // TODO: Remove once https://github.com/webhintio/hint/issues/25 is implemented.
        const exceptionHeaders = [
            'content-security-policy',
            'x-content-security-policy',
            'x-webkit-csp'
        ];
        // TODO: Remove once https://github.com/webhintio/hint/issues/25 is implemented.
        const exceptionMediaTypes = [
            'application/pdf',
            'image/svg+xml',
            'text/javascript'
        ];
        const loadHintConfigs = () => {
            const includeHeaders = (context.hintOptions && context.hintOptions.include) || [];
            const ignoreHeaders = (context.hintOptions && context.hintOptions.ignore) || [];
            unneededHeaders = utils_string_1.mergeIgnoreIncludeArrays(unneededHeaders, ignoreHeaders, includeHeaders);
        };
        const willBeTreatedAsHTML = (response) => {
            const contentTypeHeader = response.headers['content-type'];
            const mediaType = contentTypeHeader ? contentTypeHeader.split(';')[0].trim() : '';
            /*
             * By default, browsers will treat resource sent with the
             * following media types as HTML documents.
             */
            if ([
                'text/html',
                'text/xml',
                'application/xhtml+xml'
            ].includes(mediaType)) {
                return true;
            }
            /*
             * That is not the situation for other cases where the media
             * type is in the form of `<type>/<subtype>`.
             */
            if (mediaType.indexOf('/') > 0) {
                return false;
            }
            /*
             * If the media type is not specified or invalid, browser
             * will try to sniff the content.
             *
             * https://mimesniff.spec.whatwg.org/
             *
             * At this point, even if browsers may decide to treat
             * the content as a HTML document, things are obviously
             * not done correctly, so the decision was to not try to
             * also sniff the content, and instead, just signal this
             * as a problem.
             */
            return false;
        };
        const validate = ({ element, resource, response }) => {
            // This check does not make sense for data URI.
            if (utils_network_1.isDataURI(resource)) {
                debug(`Check does not apply for data URI: ${resource}`);
                return;
            }
            if (!willBeTreatedAsHTML(response)) {
                let headersToValidate = unneededHeaders;
                if (exceptionMediaTypes.includes(response.mediaType)) {
                    headersToValidate = utils_string_1.mergeIgnoreIncludeArrays(headersToValidate, exceptionHeaders, []);
                }
                const headers = utils_network_1.includedHeaders(response.headers, headersToValidate);
                const numberOfHeaders = headers.length;
                if (numberOfHeaders > 0) {
                    let message;
                    if (numberOfHeaders === 1) {
                        message = i18n_import_1.getMessage('unneededHeader', context.language, utils_string_1.prettyPrintArray(headers));
                    }
                    else {
                        message = i18n_import_1.getMessage('unneededHeaders', context.language, utils_string_1.prettyPrintArray(headers));
                    }
                    context.report(resource, message, { element, severity: utils_types_1.Severity.warning });
                }
            }
        };
        loadHintConfigs();
        context.on('fetch::end::*', validate);
    }
}
exports.default = NoHtmlOnlyHeadersHint;
NoHtmlOnlyHeadersHint.meta = meta_1.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGludC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oaW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7O0FBRUg7Ozs7R0FJRztBQUVILG1EQUErQztBQUMvQyx1REFBaUU7QUFDakUscURBQWdGO0FBR2hGLG1EQUE2QztBQUU3QyxpQ0FBMEI7QUFDMUIsK0NBQTJDO0FBRTNDLE1BQU0sS0FBSyxHQUFHLG1CQUFDLENBQUMsVUFBVSxDQUFDLENBQUM7QUFFNUI7Ozs7R0FJRztBQUVILE1BQXFCLHFCQUFxQjtJQUl0QyxZQUFtQixPQUFvQjtRQUVuQyxJQUFJLGVBQWUsR0FBRztZQUNsQix5QkFBeUI7WUFDekIsZ0JBQWdCO1lBQ2hCLDJCQUEyQjtZQUMzQixpQkFBaUI7WUFDakIsY0FBYztZQUNkLGtCQUFrQjtTQUNyQixDQUFDO1FBRUYsZ0ZBQWdGO1FBQ2hGLE1BQU0sZ0JBQWdCLEdBQUc7WUFDckIseUJBQXlCO1lBQ3pCLDJCQUEyQjtZQUMzQixjQUFjO1NBQ2pCLENBQUM7UUFFRixnRkFBZ0Y7UUFDaEYsTUFBTSxtQkFBbUIsR0FBRztZQUN4QixpQkFBaUI7WUFDakIsZUFBZTtZQUNmLGlCQUFpQjtTQUNwQixDQUFDO1FBRUYsTUFBTSxlQUFlLEdBQUcsR0FBRyxFQUFFO1lBQ3pCLE1BQU0sY0FBYyxHQUFHLENBQUMsT0FBTyxDQUFDLFdBQVcsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNsRixNQUFNLGFBQWEsR0FBRyxDQUFDLE9BQU8sQ0FBQyxXQUFXLElBQUksT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7WUFFaEYsZUFBZSxHQUFHLHVDQUF3QixDQUFDLGVBQWUsRUFBRSxhQUFhLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDL0YsQ0FBQyxDQUFDO1FBRUYsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLFFBQWtCLEVB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