"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview webhint parser needed to analyze TypeScript files.
 */
const utils_debug_1 = require("@hint/utils-debug");
const types_1 = require("hint/dist/src/lib/types");
const walk_1 = require("@hint/parser-javascript/dist/src/walk");
const debug = utils_debug_1.debug(__filename);
let TypeScriptESTree = null;
try {
    TypeScriptESTree = require('@typescript-eslint/typescript-estree');
}
catch (e) {
    debug(`Unable to load TypeScript parser: ${e}`);
}
if (TypeScriptESTree) {
    // Extend `walk` to skip over most TS-specific nodes.
    for (const type of Object.keys(TypeScriptESTree.AST_NODE_TYPES)) {
        // Ensure `value` of `ClassProperty` instances is walked.
        if (type === 'ClassProperty') {
            walk_1.base[type] = (node, st, c) => {
                if (node.value) {
                    c(node.value, st);
                }
            };
        }
        // Just ignore anything else
        if (!walk_1.base[type]) {
            walk_1.base[type] = walk_1.base.Identifier;
        }
    }
}
class TypeScriptParser extends types_1.Parser {
    constructor(engine) {
        super(engine, 'typescript');
        engine.on('fetch::end::unknown', async ({ resource, response }) => {
            if (!resource.endsWith('.ts') && !resource.endsWith('.tsx')) {
                return;
            }
            if (!TypeScriptESTree) {
                return;
            }
            debug(`Parsing TypeScript file: ${resource}`);
            const sourceCode = response.body.content;
            const jsx = resource.endsWith('.tsx');
            try {
                await engine.emitAsync('parse::start::javascript', { resource });
                const result = TypeScriptESTree.parse(sourceCode, { jsx, loc: true, useJSXTextNode: jsx });
                await walk_1.combineWalk(async (walk) => {
                    await engine.emitAsync('parse::end::javascript', {
                        ast: result,
                        element: null,
                        resource,
                        sourceCode,
                        tokens: result.tokens,
                        walk
                    });
                });
            }
            catch (err) {
                debug(`Error parsing TypeScript code (${err}): ${sourceCode}`);
            }
        });
    }
}
exports.default = TypeScriptParser;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3BhcnNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOztHQUVHO0FBQ0gsbURBQStDO0FBQy9DLG1EQUFpRDtBQUdqRCxnRUFBMEU7QUFFMUUsTUFBTSxLQUFLLEdBQUcsbUJBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUU1QixJQUFJLGdCQUFnQixHQUFpRSxJQUFJLENBQUM7QUFFMUYsSUFBSTtJQUNBLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO0NBQ3RFO0FBQUMsT0FBTyxDQUFDLEVBQUU7SUFDUixLQUFLLENBQUMscUNBQXFDLENBQUMsRUFBRSxDQUFDLENBQUM7Q0FDbkQ7QUFFRCxJQUFJLGdCQUFnQixFQUFFO0lBQ2xCLHFEQUFxRDtJQUNyRCxLQUFLLE1BQU0sSUFBSSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLEVBQUU7UUFDN0QseURBQXlEO1FBQ3pELElBQUksSUFBSSxLQUFLLGVBQWUsRUFBRTtZQUMxQixXQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFTLEVBQUUsRUFBTyxFQUFFLENBQU0sRUFBRSxFQUFFO2dCQUN4QyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7b0JBQ1osQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7aUJBQ3JCO1lBQ0wsQ0FBQyxDQUFDO1NBQ0w7UUFFRCw0QkFBNEI7UUFDNUIsSUFBSSxDQUFDLFdBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNiLFdBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxXQUFJLENBQUMsVUFBVSxDQUFDO1NBQ2hDO0tBQ0o7Q0FDSjtBQUVELE1BQXFCLGdCQUFpQixTQUFRLGNBQW9CO0lBRTlELFlBQW1CLE1BQTRCO1FBQzNDLEtBQUssQ0FBQyxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFFNUIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxLQUFLLEVBQUUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRTtZQUM5RCxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQ3pELE9BQU87YUFDVjtZQUVELElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtnQkFDbkIsT0FBTzthQUNWO1lBRUQsS0FBSyxDQUFDLDRCQUE0QixRQUFRLEVBQUUsQ0FBQyxDQUFDO1lBRTlDLE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ3pDLE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7WUFFdEMsSUFBSTtnQkFDQSxNQUFNLE1BQU0sQ0FBQyxTQUFTLENBQUMsMEJBQTBCLEVBQUUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO2dCQUVqRSxNQUFNLE1BQU0sR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7Z0JBRTNGLE1BQU0sa0JBQVcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUU7b0JBQzdCLE1BQU0sTUFBTSxDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsRUFBRTt3QkFDN0MsR0FBRyxFQUFFLE1BQWM7d0JBQ25CLE9BQU8sRUFBRSxJQUFJO3dCQUNiLFFBQVE7d0JBQ1IsVUFBVTt3QkFDVixNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQWE7d0JBQzVCLElBQUk7cUJBQ1AsQ0FBQyxDQUFDO2dCQUNQLENBQUMsQ0FBQyxDQUFDO2FBRU47WUFBQyxPQUFPLEdBQUcsRUFBRTtnQkFDVixLQUFLLENBQUMsa0NBQWtDLEdBQUcsTUFBTSxVQUFVLEVBQUUsQ0FBQyxDQUFDO2FBQ2xFO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0o7QUF4Q0QsbUNBd0NDIn0=