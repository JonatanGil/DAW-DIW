"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sassParser = require('postcss-sass');
const scssParser = require('postcss-scss');
const postcss = require("postcss");
const utils_debug_1 = require("@hint/utils-debug");
const utils_string_1 = require("@hint/utils-string");
const types_1 = require("hint/dist/src/lib/types");
const debug = utils_debug_1.debug(__filename);
class CSSParser extends types_1.Parser {
    constructor(engine) {
        super(engine, 'sass');
        const emitSASS = async (code, parser, resource, element) => {
            try {
                await this.engine.emitAsync(`parse::start::css`, { resource });
                const result = await postcss().process(code, { from: resource, parser });
                const ast = result.root; // always defined even for '' (typings error?)
                await this.engine.emitAsync(`parse::end::css`, {
                    ast,
                    code,
                    element,
                    resource
                });
            }
            catch (err) /* istanbul ignore next */ {
                debug(`Error parsing SASS code: ${code} - ${err}`);
            }
        };
        engine.on('fetch::end::*', async (fetchEnd) => {
            const code = fetchEnd.response.body.content;
            const resource = fetchEnd.resource;
            if (fetchEnd.response.mediaType === 'text/x-sass') {
                await emitSASS(code, sassParser, resource, null);
            }
            else if (fetchEnd.response.mediaType === 'text/x-scss') {
                await emitSASS(code, scssParser, resource, null);
            }
        });
        engine.on('element::style', async ({ element, resource }) => {
            const lang = utils_string_1.normalizeString(element.getAttribute('lang'));
            if (lang === 'sass') {
                await emitSASS(element.innerHTML, sassParser, resource, element);
            }
            else if (lang === 'scss') {
                await emitSASS(element.innerHTML, scssParser, resource, element);
            }
        });
    }
}
exports.default = CSSParser;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3BhcnNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUMzQyxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7QUFFM0MsbUNBQW1DO0FBRW5DLG1EQUErQztBQUMvQyxxREFBcUQ7QUFFckQsbURBQWlEO0FBSWpELE1BQU0sS0FBSyxHQUFHLG1CQUFDLENBQUMsVUFBVSxDQUFDLENBQUM7QUFFNUIsTUFBcUIsU0FBVSxTQUFRLGNBQW1CO0lBQ3RELFlBQW1CLE1BQTJCO1FBQzFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFdEIsTUFBTSxRQUFRLEdBQUcsS0FBSyxFQUFFLElBQVksRUFBRSxNQUFzQixFQUFFLFFBQWdCLEVBQUUsT0FBMkIsRUFBRSxFQUFFO1lBRTNHLElBQUk7Z0JBQ0EsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsRUFBRSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7Z0JBRS9ELE1BQU0sTUFBTSxHQUFHLE1BQU0sT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztnQkFDekUsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLElBQUssQ0FBQyxDQUFDLDhDQUE4QztnQkFFeEUsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsRUFBRTtvQkFDM0MsR0FBRztvQkFDSCxJQUFJO29CQUNKLE9BQU87b0JBQ1AsUUFBUTtpQkFDWCxDQUFDLENBQUM7YUFFTjtZQUFDLE9BQU8sR0FBRyxFQUFFLDBCQUEwQixDQUFDO2dCQUNyQyxLQUFLLENBQUMsNEJBQTRCLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQyxDQUFDO2FBQ3REO1FBQ0wsQ0FBQyxDQUFDO1FBRUYsTUFBTSxDQUFDLEVBQUUsQ0FBQyxlQUFlLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxFQUFFO1lBQzFDLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUM1QyxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDO1lBRW5DLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEtBQUssYUFBYSxFQUFFO2dCQUMvQyxNQUFNLFFBQVEsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQzthQUNwRDtpQkFBTSxJQUFJLFFBQVEsQ0FBQyxRQUFRLENBQUMsU0FBUyxLQUFLLGFBQWEsRUFBRTtnQkFDdEQsTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDcEQ7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUU7WUFDeEQsTUFBTSxJQUFJLEdBQUcsOEJBQWUsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFFM0QsSUFBSSxJQUFJLEtBQUssTUFBTSxFQUFFO2dCQUNqQixNQUFNLFFBQVEsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7YUFDcEU7aUJBQU0sSUFBSSxJQUFJLEtBQUssTUFBTSxFQUFFO2dCQUN4QixNQUFNLFFBQVEsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7YUFDcEU7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSjtBQTdDRCw0QkE2Q0MifQ==