"use strict";
/**
 * @fileoverview Check if error pages have the size under a certain
 * threshold.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * ------------------------------------------------------------------------------
 * Requirements
 * ------------------------------------------------------------------------------
 */
const url = require("url");
const url_1 = require("url"); // this is necessary to avoid TypeScript mixes types.
const utils_network_1 = require("@hint/utils-network");
const utils_debug_1 = require("@hint/utils-debug");
const utils_types_1 = require("@hint/utils-types");
const meta_1 = require("./meta");
const i18n_import_1 = require("./i18n.import");
const debug = utils_debug_1.debug(__filename);
/*
 * ------------------------------------------------------------------------------
 * Public
 * ------------------------------------------------------------------------------
 */
class NoFriendlyErrorPagesHint {
    constructor(context) {
        // This hint mainly applies to Internet Explorer 5-11.
        if (!['ie 5', 'ie 6', 'ie 7', 'ie 8', 'ie 9', 'ie 10', 'ie 11'].some((e) => {
            return context.targetedBrowsers.includes(e);
        })) {
            debug(`Hint does not apply for targeted browsers`);
            return;
        }
        const foundErrorPages = {};
        /*
         * Default thresholds:
         * https://blogs.msdn.microsoft.com/ieinternals/2010/08/18/friendly-http-error-pages/
         */
        const statusCodesWith256Threshold = [403, 405, 410];
        const statusCodesWith512Threshold = [400, 404, 406, 408, 409, 500, 501, 505];
        const checkForErrorPages = ({ resource, response }) => {
            // This check does not make sense for data URI.
            if (utils_network_1.isDataURI(resource)) {
                debug(`Check does not apply for data URI: ${resource}`);
                return;
            }
            const statusCode = response.statusCode;
            const size = (response.body.rawContent || []).length;
            /*
             * This hint doesn't care about individual responses, only
             * if, in general, for a certain error response the size
             * of the response was over a specific threshold, therefore,
             * there is no need to report every error response.
             */
            if (((size < 512) && statusCodesWith512Threshold.includes(statusCode)) ||
                ((size < 256) && statusCodesWith256Threshold.includes(statusCode))) {
                foundErrorPages[statusCode] = {
                    size,
                    url: response.url
                };
            }
        };
        const tryToGenerateErrorPage = async (targetURL) => {
            const baseURL = url.format(Object.assign(new url_1.URL(targetURL), {
                fragment: false,
                search: false
            }));
            /*
             * The following will make a request to:
             *
             *    <site>/.well-known/<random-number>
             *
             * Why `.well-known/`? Because it's a standard location
             * (https://tools.ietf.org/html/rfc5785), where
             * theoretically, only certain things should exists
             * (https://www.iana.org/assignments/well-known-uris/well-known-uris.xhtml),
             * so the request should have a higher chance of generating
             * an error response (most likely a 404) then making
             * a request to something such as:
             *
             *    <site>/<random-number>
             *
             * which might actually be mapped to something.
             */
            try {
                const networkData = await context.fetchContent(url.resolve(baseURL, `.well-known/${Math.random()}`));
                checkForErrorPages({
                    element: null,
                    request: networkData.request,
                    resource: targetURL,
                    response: networkData.response
                });
            }
            catch (e) {
                // This will most likely fail because target is a local file.
                debug(`Custom request to generate error response failed for: ${targetURL}`);
            }
        };
        const validate = async ({ resource: href }) => {
            /*
             * If no error responses were found, and more specifically,
             * if no 404 error response was found, try to generate one.
             *
             * (404 because the following function will most likely
             *  generate a 404 error response, other responses cannot
             *  be generated... so easily).
             */
            if (Object.keys(foundErrorPages).length === 0 || !foundErrorPages[404]) {
                await tryToGenerateErrorPage(href);
            }
            for (const key of Object.keys(foundErrorPages)) {
                const threshold = statusCodesWith512Threshold.includes(Number.parseInt(key)) ? 512 : 256;
                context.report(href, i18n_import_1.getMessage('responseWithStatus', context.language, [key, threshold.toString()]), { severity: utils_types_1.Severity.hint });
            }
        };
        context.on('fetch::end::*', checkForErrorPages);
        context.on('traverse::end', validate);
    }
}
exports.default = NoFriendlyErrorPagesHint;
NoFriendlyErrorPagesHint.meta = meta_1.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGludC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oaW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7O0FBRUg7Ozs7R0FJRztBQUVILDJCQUEyQjtBQUMzQiw2QkFBMEIsQ0FBQyxxREFBcUQ7QUFFaEYsdURBQWdEO0FBQ2hELG1EQUErQztBQUUvQyxtREFBNkM7QUFFN0MsaUNBQTBCO0FBQzFCLCtDQUEyQztBQUUzQyxNQUFNLEtBQUssR0FBRyxtQkFBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBRTVCOzs7O0dBSUc7QUFFSCxNQUFxQix3QkFBd0I7SUFJekMsWUFBbUIsT0FBb0I7UUFFbkMsc0RBQXNEO1FBRXRELElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQ3ZFLE9BQU8sT0FBTyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoRCxDQUFDLENBQUMsRUFBRTtZQUNBLEtBQUssQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO1lBRW5ELE9BQU87U0FDVjtRQUVELE1BQU0sZUFBZSxHQUF3RCxFQUFFLENBQUM7UUFFaEY7OztXQUdHO1FBRUgsTUFBTSwyQkFBMkIsR0FBYSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDOUQsTUFBTSwyQkFBMkIsR0FBYSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUV2RixNQUFNLGtCQUFrQixHQUFHLENBQUMsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFZLEVBQUUsRUFBRTtZQUM1RCwrQ0FBK0M7WUFFL0MsSUFBSSx5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