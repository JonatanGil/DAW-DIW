"use strict";
/**
 * @fileoverview Checks if CSS exceeds known stylesheet limits.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const utils_types_1 = require("@hint/utils-types");
const meta_1 = require("./meta");
const i18n_import_1 = require("./i18n.import");
/*
 * ------------------------------------------------------------------------------
 * Public
 * ------------------------------------------------------------------------------
 */
class StylesheetLimitsHint {
    constructor(context) {
        // Allow limits to be overridden by hint options.
        const options = context.hintOptions;
        // Check if browsers with default limits are included.
        const includesOldIE = ['ie 6', 'ie 7', 'ie 8', 'ie 9'].some((e) => {
            return context.targetedBrowsers.includes(e);
        });
        if (!options && !includesOldIE) {
            // Exit if we don't have any limits to test.
            return;
        }
        let hasImportLimit = includesOldIE;
        let hasRuleLimit = includesOldIE;
        let hasSheetLimit = includesOldIE;
        let maxImports = includesOldIE ? 4 : 0;
        let maxRules = includesOldIE ? 4095 : 0;
        let maxSheets = includesOldIE ? 31 : 0;
        // Min the default/options values to ensure overrides can't "hide" browser limits.
        if (options) {
            // Always use the options value if no default import limit is specified.
            if (options.maxImports && (!hasImportLimit || options.maxImports < maxImports)) {
                maxImports = options.maxImports;
                hasImportLimit = true;
            }
            if (options.maxRules && (!hasRuleLimit || options.maxRules < maxRules)) {
                maxRules = options.maxRules;
                hasRuleLimit = true;
            }
            if (options.maxSheets && (!hasSheetLimit || options.maxSheets < maxSheets)) {
                maxSheets = options.maxSheets;
                hasSheetLimit = true;
            }
        }
        /* istanbul ignore next */
        // The following function will be evaluated in the context of the page.
        const injectedCode = function () {
            // Recursively count rules and imports in the passed stylesheet.
            const countRules = (styleSheet) => {
                const results = {
                    imports: 0,
                    rules: 0,
                    sheets: 1
                };
                try {
                    // Count rules in this stylesheet.
                    Array.from(styleSheet.cssRules).forEach((rule) => {
                        if (rule instanceof CSSStyleRule) {
                            // Count each selector in a style rule separately.
                            results.rules += rule.selectorText.split(',').length;
                        }
                        else if (rule instanceof CSSImportRule) {
                            // Recursively count rules in imported stylesheets.
                            const subResults = countRules(rule.styleSheet);
                            results.imports += Math.max(results.imports, subResults.imports + 1);
                            results.rules += subResults.rules + 1;
                            results.sheets += subResults.sheets;
                        }
                        else {
                            // Other rules count as one each.
                            results.rules += 1;
                        }
                    });
                }
                catch (e) {
                    /*
                     * Accessing cssRules of a cross-origin stylesheet can throw.
                     * If this happens, exclude the stylesheet from the count.
                     */
                }
                return results;
            };
            const combinedResults = {
                imports: 0,
                rules: 0,
                sheets: 0
            };
            // Get the recursive count of rules for all stylesheets in the page.
            Array.from(document.styleSheets).forEach((sheet) => {
                if (sheet instanceof CSSStyleSheet) {
                    const subResults = countRules(sheet);
                    combinedResults.imports += Math.max(combinedResults.imports, subResults.imports);
                    combinedResults.rules += subResults.rules;
                    combinedResults.sheets += subResults.sheets;
                }
            });
            return combinedResults;
        };
        const validateScanEnd = async (event) => {
            const results = await context.evaluate(`(${injectedCode})()`);
            // Report once we hit a limit to support flagging on platforms which will drop subsequent rules.
            // Only check `maxImports` if a limit has been specified
            if (hasImportLimit && results.imports >= maxImports) {
                context.report(event.resource, i18n_import_1.getMessage('maximumNested', context.language, [maxImports.toString(), results.imports.toString()]), { severity: utils_types_1.Severity.error });
            }
            if (hasRuleLimit && results.rules >= maxRules) {
                context.report(event.resource, i18n_import_1.getMessage('maximumRules', context.language, [maxRules.toString(), results.rules.toString()]), { severity: utils_types_1.Severity.error });
            }
            if (hasSheetLimit && results.sheets >= maxSheets) {
                context.report(event.resource, i18n_import_1.getMessage('maximumStylesheets', context.language, [maxSheets.toString(), results.sheets.toString()]), { severity: utils_types_1.Severity.error });
            }
        };
        context.on('can-evaluate::script', validateScanEnd);
    }
}
exports.default = StylesheetLimitsHint;
StylesheetLimitsHint.meta = meta_1.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGludC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oaW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7QUFJSCxtREFBNkM7QUFFN0MsaUNBQTBCO0FBQzFCLCtDQUEyQztBQUUzQzs7OztHQUlHO0FBRUgsTUFBcUIsb0JBQW9CO0lBSXJDLFlBQW1CLE9BQW9CO1FBRW5DLGlEQUFpRDtRQUNqRCxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDO1FBRXBDLHNEQUFzRDtRQUN0RCxNQUFNLGFBQWEsR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQzlELE9BQU8sT0FBTyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoRCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDNUIsNENBQTRDO1lBQzVDLE9BQU87U0FDVjtRQUVELElBQUksY0FBYyxHQUFHLGFBQWEsQ0FBQztRQUNuQyxJQUFJLFlBQVksR0FBRyxhQUFhLENBQUM7UUFDakMsSUFBSSxhQUFhLEdBQUcsYUFBYSxDQUFDO1FBRWxDLElBQUksVUFBVSxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkMsSUFBSSxRQUFRLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4QyxJQUFJLFNBQVMsR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXZDLGtGQUFrRjtRQUNsRixJQUFJLE9BQU8sRUFBRTtZQUNULHdFQUF3RTtZQUN4RSxJQUFJLE9BQU8sQ0FBQyxVQUFVLElBQUks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