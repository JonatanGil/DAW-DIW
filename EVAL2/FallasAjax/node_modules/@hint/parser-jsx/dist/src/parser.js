"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview webhint parser needed to analyze HTML contained within JSX files.
 */
const parse5 = require("parse5");
const htmlparser2Adapter = require("parse5-htmlparser2-tree-adapter");
const utils_debug_1 = require("@hint/utils-debug");
const utils_dom_1 = require("@hint/utils-dom");
const types_1 = require("hint/dist/src/lib/types");
const debug = utils_debug_1.debug(__filename);
/**
 * Check if the provided `Node` is a native HTML element in JSX.
 */
const isNativeElement = (node) => {
    if (node.type !== 'JSXElement') {
        return false;
    }
    /* istanbul ignore if */
    if (node.openingElement.name.type !== 'JSXIdentifier') {
        return false; // Ignore JSXMemberExpression and JSXNamespacedName.
    }
    const { name } = node.openingElement.name;
    return name[0] === name[0].toLowerCase(); // Ignore custom components.
};
/**
 * Check if the provided `Node` is a `JSXAttribute` or native HTML element.
 */
const isAttributeOrNativeElement = (node) => {
    if (node.type === 'JSXAttribute') {
        return true;
    }
    return isNativeElement(node);
};
/**
 * Translate JS AST locations to HTML AST locations.
 */
const mapLocation = (node, { startColumnOffset = 0 } = {}) => {
    // TODO: Remove `columnOffset` once `Problem` supports a range.
    return {
        endCol: node.loc && (node.loc.end.column) || -1,
        endLine: node.loc && node.loc.end.line || -1,
        endOffset: node.range && node.range[1] || -1,
        startCol: node.loc && (node.loc.start.column + startColumnOffset) || -1,
        startLine: node.loc && node.loc.start.line || -1,
        startOffset: node.range && node.range[0] || -1
    };
};
/**
 * Convert a JSX attribute name to its HTML equivalent.
 */
const mapAttributeName = (name) => {
    if (name === 'className') {
        return 'class';
    }
    if (name === 'htmlFor') {
        return 'for';
    }
    return name;
};
/**
 * Translate collections of `JSXAttribute`s to their HTML AST equivalent.
 */
const mapAttributes = (node) => {
    const attribs = {};
    const locations = {};
    for (const attribute of node.openingElement.attributes) {
        if (attribute.type !== 'JSXAttribute') {
            continue; // TODO: Do something useful with JSXSpreadAttribute instances.
        }
        /* istanbul ignore if */
        if (attribute.name.type !== 'JSXIdentifier') {
            continue;
        }
        /* istanbul ignore if */
        if (attribute.value && attribute.value.type !== 'Literal' && attribute.value.type !== 'JSXExpressionContainer') {
            continue;
        }
        const name = mapAttributeName(attribute.name.name);
        if (!attribute.value) {
            attribs[name] = '';
        }
        else if (attribute.value.type === 'JSXExpressionContainer') {
            attribs[name] = `{expression}`;
        }
        else {
            attribs[name] = `${attribute.value.value}`;
        }
        locations[name] = mapLocation(attribute);
    }
    return {
        attribs,
        attrs: locations,
        'x-attribsNamespace': {},
        'x-attribsPrefix': {}
    };
};
/**
 * Translate `JSXElement` instances (JS AST) to `ElementData` (HTML AST).
 */
const mapElement = (node, childMap) => {
    /* istanbul ignore if */
    if (node.openingElement.name.type !== 'JSXIdentifier') {
        throw new Error('Can only map elements with known names');
    }
    const { name } = node.openingElement.name;
    const _a = mapAttributes(node), { attrs } = _a, attribs = __rest(_a, ["attrs"]);
    const children = childMap.get(node) || [];
    return Object.assign(Object.assign({}, attribs), { children,
        name, next: null, parent: null, prev: null, sourceCodeLocation: Object.assign({ attrs, endTag: node.closingElement ? mapLocation(node.closingElement) : undefined, startTag: Object.assign({ attrs }, mapLocation(node.openingElement, { startColumnOffset: 1 })) }, mapLocation(node, { startColumnOffset: 1 })), type: 'tag' });
};
/**
 * Translate JSX expressions `{foo}` to text placeholders.
 */
const mapExpression = (node) => {
    return {
        data: '{expression}',
        next: null,
        parent: null,
        prev: null,
        sourceCodeLocation: mapLocation(node),
        type: 'text'
    };
};
/**
 * Translate `JSXText` instances (JS AST) to `TextData` (HTML AST).
 */
const mapText = (node) => {
    return {
        data: node.value,
        next: null,
        parent: null,
        prev: null,
        sourceCodeLocation: mapLocation(node),
        type: 'text'
    };
};
/**
 * Find the nearest parent which is a native HTML element.
 */
const getParentElement = (ancestors) => {
    return ancestors
        .slice(0, -1) // Omit target node
        .reverse()
        .filter(isNativeElement)[0];
};
/**
 * Find the nearest parent which is a native HTML element or an attribute.
 */
const getParentAttributeOrElement = (ancestors) => {
    return ancestors
        .slice(0, -1) // Omit target node
        .reverse()
        .filter(isAttributeOrNativeElement)[0];
};
/**
 * Queue a child to be added to the `ElementData` for the provided `JSXElement`.
 */
const addChild = (data, parent, children) => {
    const list = children.get(parent) || [];
    list.push(data);
    children.set(parent, list);
};
/**
 * Generate an HTML document representing a fragment containing the
 * provided roots derived from the specified resource.
 */
const createHTMLFragment = (roots, resource) => {
    const dom = parse5.parse(`<!doctype html><html data-webhint-fragment></html>`, { treeAdapter: htmlparser2Adapter });
    const body = dom.children[1].children[1];
    roots.forEach((root) => {
        body.children.push(root);
    });
    utils_dom_1.restoreReferences(dom);
    return new utils_dom_1.HTMLDocument(dom, resource);
};
class JSXParser extends types_1.Parser {
    constructor(engine) {
        super(engine, 'jsx');
        engine.on('parse::end::javascript', ({ ast, resource, walk }) => {
            const roots = new Map();
            const childMap = new Map();
            walk.ancestor(ast, {
                JSXElement(node, /* istanbul ignore next */ ancestors = []) {
                    if (!isNativeElement(node)) {
                        return;
                    }
                    const data = mapElement(node, childMap);
                    const parent = getParentElement(ancestors);
                    if (parent) {
                        addChild(data, parent, childMap);
                    }
                    else {
                        roots.set(node, data);
                    }
                },
                JSXExpressionContainer(node, /* istanbul ignore next */ ancestors = []) {
                    const data = mapExpression(node);
                    const parent = getParentAttributeOrElement(ancestors);
                    if (parent && parent.type !== 'JSXAttribute') {
                        addChild(data, parent, childMap);
                    }
                },
                JSXText(node, /* istanbul ignore next */ ancestors = []) {
                    const data = mapText(node);
                    const parent = getParentElement(ancestors);
                    if (parent) {
                        addChild(data, parent, childMap);
                    }
                }
            });
            walk.onComplete(async () => {
                if (!roots.size) {
                    return; // No JSX content found.
                }
                await this.engine.emitAsync(`parse::start::html`, { resource });
                const document = createHTMLFragment(roots, resource);
                const html = `<!doctype html>\n${document.documentElement.outerHTML}`;
                debug('Generated HTML from JSX:', html);
                await this.engine.emitAsync('parse::end::html', { document, html, resource });
            });
        });
    }
}
exports.default = JSXParser;
//# sourceMappingURL=data:application/json;base64,