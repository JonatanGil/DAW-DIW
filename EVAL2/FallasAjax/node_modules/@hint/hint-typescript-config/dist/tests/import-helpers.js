"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const mock = require("mock-require");
const sinon = require("sinon");
const utils = require("@hint/utils");
const utils_tests_helpers_1 = require("@hint/utils-tests-helpers");
const utils_types_1 = require("@hint/utils-types");
const hintPath = utils_tests_helpers_1.getHintPath(__filename, true);
const tests = [
    {
        after: (t) => {
            t.context.sandbox.restore();
        },
        before: (t) => {
            const sandbox = sinon.createSandbox();
            sandbox.stub(utils, 'loadPackage').returns({ exists: true });
            t.context.sandbox = sandbox;
            mock('@hint/utils/dist/src/packages/load-package', { loadPackage: utils.loadPackage });
        },
        name: 'Configuration with "compilerOptions.importHelpers = true" should pass',
        path: path.join(__dirname, 'fixtures', 'import-helpers', 'import')
    },
    {
        after: (t) => {
            t.context.sandbox.restore();
        },
        before: (t) => {
            const sandbox = sinon.createSandbox();
            sandbox.stub(utils, 'loadPackage').throws(new Error('Not found'));
            t.context.sandbox = sandbox;
            mock('@hint/utils/dist/src/packages/load-package', { loadPackage: utils.loadPackage });
        },
        name: 'Configuration with "compilerOptions.importHelpers = true" but tslibs is not installed should fail',
        path: path.join(__dirname, 'fixtures', 'import-helpers', 'import'),
        reports: [{
                message: `Couldn't find package "tslib".`,
                severity: utils_types_1.Severity.error
            }]
    },
    {
        after: (t) => {
            t.context.sandbox.restore();
        },
        before: (t) => {
            const sandbox = sinon.createSandbox();
            sandbox.stub(utils, 'loadPackage').returns({ exists: true });
            t.context.sandbox = sandbox;
            mock('@hint/utils/dist/src/packages/load-package', { loadPackage: utils.loadPackage });
        },
        name: 'Configuration with "compilerOptions.importHelpers = false" should fail',
        path: path.join(__dirname, 'fixtures', 'import-helpers', 'import-false'),
        reports: [
            {
                message: 'The compiler option "importHelpers" should be enabled to reduce the output size.',
                position: { match: 'false' },
                severity: utils_types_1.Severity.warning
            }
        ]
    },
    {
        after: (t) => {
            t.context.sandbox.restore();
        },
        before: (t) => {
            const sandbox = sinon.createSandbox();
            sandbox.stub(utils, 'loadPackage').returns({ exists: true });
            t.context.sandbox = sandbox;
            mock('@hint/utils/dist/src/packages/load-package', { loadPackage: utils.loadPackage });
        },
        name: 'Configuration with no explicit "compilerOptions.importHelpers" should fail',
        path: path.join(__dirname, 'fixtures', 'import-helpers', 'no-import'),
        reports: [
            {
                message: 'The compiler option "importHelpers" should be enabled to reduce the output size.',
                position: { match: 'compilerOptions' },
                severity: utils_types_1.Severity.warning
            }
        ]
    },
    {
        after: (t) => {
            t.context.sandbox.restore();
        },
        before: (t) => {
            const sandbox = sinon.createSandbox();
            sandbox.stub(utils, 'loadPackage').throws(new Error('Not found'));
            t.context.sandbox = sandbox;
            mock('@hint/utils/dist/src/packages/load-package', { loadPackage: utils.loadPackage });
        },
        name: 'Configuration with no explicit "compilerOptions.importHelpers" and no "tslib" installed should fail',
        path: path.join(__dirname, 'fixtures', 'import-helpers', 'no-import'),
        reports: [
            {
                message: 'The compiler option "importHelpers" should be enabled to reduce the output size.',
                position: { match: 'compilerOptions' },
                severity: utils_types_1.Severity.warning
            },
            {
                message: `Couldn't find package "tslib".`,
                severity: utils_types_1.Severity.error
            }
        ]
    }
];
utils_tests_helpers_1.testLocalHint(hintPath, tests, { parsers: ['typescript-config'], serial: true });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wb3J0LWhlbHBlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi90ZXN0cy9pbXBvcnQtaGVscGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUE2QjtBQUc3QixxQ0FBcUM7QUFDckMsK0JBQStCO0FBRS9CLHFDQUFxQztBQUNyQyxtRUFBc0Y7QUFDdEYsbURBQTZDO0FBTTdDLE1BQU0sUUFBUSxHQUFHLGlDQUFXLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBRS9DLE1BQU0sS0FBSyxHQUFvQjtJQUMzQjtRQUNJLEtBQUssRUFBRSxDQUFDLENBQXlDLEVBQUUsRUFBRTtZQUNqRCxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNoQyxDQUFDO1FBQ0QsTUFBTSxFQUFFLENBQUMsQ0FBeUMsRUFBRSxFQUFFO1lBQ2xELE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUV0QyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUU3RCxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7WUFFNUIsSUFBSSxDQUFDLDRDQUE0QyxFQUFFLEVBQUUsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQzNGLENBQUM7UUFDRCxJQUFJLEVBQUUsdUVBQXVFO1FBQzdFLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxDQUFDO0tBQ3JFO0lBQ0Q7UUFDSSxLQUFLLEVBQUUsQ0FBQyxDQUF5QyxFQUFFLEVBQUU7WUFDakQsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDaEMsQ0FB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