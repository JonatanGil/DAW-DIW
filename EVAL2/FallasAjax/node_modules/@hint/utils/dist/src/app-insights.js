"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const appInsights = require("applicationinsights");
const configStore = require("./config-store");
const utils_debug_1 = require("@hint/utils-debug");
const debug = utils_debug_1.debug(__filename);
const configStoreKey = 'insight';
let insightsEnabled = configStore.get(configStoreKey);
let appInsightsClient = {
    /* istanbul ignore next */
    flush(options) {
        debug('Application Insights is not enabled.');
        options.callback();
    },
    trackEvent() {
        debug('Application Insights is not enabled.');
    },
    trackException() {
        debug('Application Insights is not enabled.');
    }
};
/** Enables Application Insights. */
const enableInsight = () => {
    debug('Enabling Application Insights');
    appInsights.setup('8ef2b55b-2ce9-4c33-a09a-2c3ef605c97d')
        .setAutoDependencyCorrelation(true)
        .setAutoCollectRequests(true)
        .setAutoCollectPerformance(true)
        .setAutoCollectExceptions(true)
        .setAutoCollectDependencies(true)
        .setUseDiskRetryCaching(true)
        .setInternalLogging(false, false)
        .start();
    appInsightsClient = appInsights.defaultClient;
};
if (insightsEnabled) {
    enableInsight();
}
else {
    debug('Application Insight disabled');
}
/** Check if Application Insights is enabled or not. */
exports.isEnabled = () => {
    return insightsEnabled;
};
/** Enable Application Insight. */
exports.enable = () => {
    debug('User is enabling Application Insights');
    configStore.set(configStoreKey, true);
    insightsEnabled = true;
    enableInsight();
};
/** Disable Application Insights for the future. */
exports.disable = () => {
    debug('User is disabling Application Insights');
    configStore.set(configStoreKey, false);
    insightsEnabled = false;
};
/** Send pending data to Application Insights. */
/* istanbul ignore next */
exports.sendPendingData = (isAppCrashing = false) => {
    debug('Sending pending data to Application Insights');
    return new Promise((resolve) => {
        appInsightsClient.flush({
            callback: (message) => {
                debug(message);
                return resolve();
            },
            isAppCrashing
        });
    });
};
/** Track an exception in Application Insights. */
exports.trackException = (error) => {
    debug(`Sending exception to Application Insights: ${error.toString()}`);
    appInsightsClient.trackException({ exception: error });
};
/** Track an event in Application Insights. */
exports.trackEvent = (name, properties) => {
    debug(`Sending event "${name}" to Application Insights with value ${JSON.stringify(properties)}`);
    appInsightsClient.trackEvent({ name, properties: { config: JSON.stringify(properties, null, 2) } });
};
/** Return the Application Insights client. */
/* istanbul ignore next */
exports.getClient = () => {
    debug('Getting Application Insights client');
    return appInsightsClient;
};
/** Check if Application Insights is configured. */
/* istanbul ignore next */
exports.isConfigured = () => {
    return typeof configStore.get(configStoreKey) !== 'undefined';
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWluc2lnaHRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwcC1pbnNpZ2h0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1EQUFtRDtBQUVuRCw4Q0FBOEM7QUFDOUMsbURBQStDO0FBTS9DLE1BQU0sS0FBSyxHQUFvQixtQkFBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQzdDLE1BQU0sY0FBYyxHQUFXLFNBQVMsQ0FBQztBQUV6QyxJQUFJLGVBQWUsR0FBd0IsV0FBVyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUUzRSxJQUFJLGlCQUFpQixHQUFnQztJQUNqRCwwQkFBMEI7SUFDMUIsS0FBSyxDQUFDLE9BQXNCO1FBQ3hCLEtBQUssQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO1FBQzlDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBQ0QsVUFBVTtRQUNOLEtBQUssQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFDRCxjQUFjO1FBQ1YsS0FBSyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7SUFDbEQsQ0FBQztDQUNHLENBQUM7QUFFVCxvQ0FBb0M7QUFDcEMsTUFBTSxhQUFhLEdBQUcsR0FBRyxFQUFFO0lBQ3ZCLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO0lBQ3ZDLFdBQVcsQ0FBQyxLQUFLLENBQUMsc0NBQXNDLENBQUM7U0FDcEQsNEJBQTRCLENBQUMsSUFBSSxDQUFDO1NBQ2xDLHNCQUFzQixDQUFDLElBQUksQ0FBQztTQUM1Qix5QkFBeUIsQ0FBQyxJQUFJLENBQUM7U0FDL0Isd0JBQXdCLENBQUMsSUFBSSxDQUFDO1NBQzlCLDBCQUEwQixDQUFDLElBQUksQ0FBQztTQUNoQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUM7U0FDNUIsa0JBQWtCLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQztTQUNoQyxLQUFLLEVBQUUsQ0FBQztJQUViLGlCQUFpQixHQUFH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