"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const isWebhintVariable = (variable) => {
    return variable.toLowerCase().startsWith('webhint_');
};
const parseValue = (value) => {
    const parsedInt = parseInt(value);
    if (!isNaN(parsedInt)) {
        return parsedInt;
    }
    if (value === 'true') {
        return true;
    }
    if (value === 'false') {
        return false;
    }
    return value;
};
/**
 * Adds the value of a variable to an object creating as many properties as
 * needed.
 *
 * E.g.:
 *
 * ```js
 * addToConfig('webhint_connector_options_auth_username', 'johndoe', {});
 * ```
 *
 * gets transformed into
 *
 * ```json
 * {
 *   "connector": {
 *     "options": {
 *       "auth": {
 *         "username": "johndoe"
 *       }
 *     }
 *   }
 * }
 * ```
 *
 * @param variable The variable to add to a config. E.g.:
 *   `webhint_connector_options_auth_username`
 * @param value Any string
 * @param config The object to add the config too
 */
const addToConfig = (variable, value, config) => {
    /** `variable` example: webhint_connector_options_auth_username */
    const parts = variable.split('_');
    /** First item is `webhint` and it is not needed */
    parts.shift();
    const lastPart = parts.pop();
    const context = parts.reduce((current, part) => {
        /* Create the property if necessary */
        return (current[part] = current[part] || {});
    }, config);
    context[lastPart] = parseValue(value);
};
/**
 * Merges any enviroment variable prefixed with `webhint_` with the given
 * options given priority to the `options`.
 *
 * E.g.: `WEBHINT_connector_options_ignoreHTTPSErrors=true` will be:
 *
 * ```json
 * {
 *   "connector": {
 *       "name": true
 *   }
 * }
 * ```
 *
 * @param options The initial set of options to merge the env variables with.
 */
exports.mergeEnvWithOptions = (options) => {
    const environment = process.env; // eslint-disable-line no-process-env
    const envConfig = {};
    const variables = Object.keys(environment);
    for (const variable of variables) {
        if (isWebhintVariable(variable)) {
            addToConfig(variable, process.env[variable], envConfig); // eslint-disable-line no-process-env
        }
    }
    const finalOptions = lodash_1.merge(envConfig, options);
    return finalOptions;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVyZ2UtZW52LXdpdGgtb3B0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9taXNjL21lcmdlLWVudi13aXRoLW9wdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQ0FBK0I7QUFFL0IsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLFFBQWdCLEVBQUUsRUFBRTtJQUMzQyxPQUFPLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDekQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxVQUFVLEdBQUcsQ0FBQyxLQUFhLEVBQTZCLEVBQUU7SUFDNUQsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRWxDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUU7UUFDbkIsT0FBTyxTQUFTLENBQUM7S0FDcEI7SUFFRCxJQUFJLEtBQUssS0FBSyxNQUFNLEVBQUU7UUFDbEIsT0FBTyxJQUFJLENBQUM7S0FDZjtJQUVELElBQUksS0FBSyxLQUFLLE9BQU8sRUFBRTtRQUNuQixPQUFPLEtBQUssQ0FBQztLQUNoQjtJQUVELE9BQU8sS0FBSyxDQUFDO0FBQ2pCLENBQUMsQ0FBQztBQUVGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBNEJHO0FBQ0gsTUFBTSxXQUFXLEdBQUcsQ0FBQyxRQUFnQixFQUFFLEtBQWEsRUFBRSxNQUFXLEVBQUUsRUFBRTtJQUNqRSxrRUFBa0U7SUFDbEUsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVsQyxtREFBbUQ7SUFDbkQsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBRWQsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRyxDQUFDO0lBQzlCLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLEVBQUU7UUFDM0Msc0NBQXNDO1FBQ3RDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ2pELENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUVYLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDMUMsQ0FBQyxDQUFDO0FBRUY7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBQ1UsUUFBQSxtQkFBbUIsR0FBRyxDQUFDLE9BQVksRUFBRSxFQUFFO0lBQ2hELE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxxQ0FBcUM7SUFDdEUsTUFBTSxTQUFTLEdBQVEsRUFBRSxDQUFDO0lBRTFCLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFFM0MsS0FBSyxNQUFNLFFBQVEsSUFBSSxTQUFTLEVBQUU7UUFDOUIsSUFBSSxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUM3QixXQUFXLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFFLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxxQ0FBcUM7U0FDbEc7S0FDSjtJQUVELE1BQU0sWUFBWSxHQUFHLGNBQUssQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFL0MsT0FBTyxZQUFZLENBQUM7QUFDeEIsQ0FBQyxDQUFDIn0=