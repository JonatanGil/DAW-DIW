"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const normalize_hints_1 = require("./normalize-hints");
const load_resource_1 = require("../packages/load-resource");
const enums_1 = require("../packages/enums");
const getHintsFromExtend = (extendName, parentConfigs = []) => {
    try {
        if (parentConfigs.includes(extendName)) {
            return {};
        }
        const configuration = load_resource_1.loadResource(extendName, enums_1.ResourceType.configuration, parentConfigs);
        return Object.assign(Object.assign({}, getHintsFromExtends(configuration.extends, [extendName, ...parentConfigs])), normalize_hints_1.default(configuration.hints || {}));
    }
    catch (e) /* istanbul ignore next */ { // If the configuration doesn't exists, ignore it and returns an empty object.
        return {};
    }
};
const getHintsFromExtends = (extendNames, parentConfigs = []) => {
    if (!extendNames || extendNames.length === 0) {
        return {};
    }
    const extendName = extendNames[0];
    return Object.assign(Object.assign({}, getHintsFromExtend(extendName, parentConfigs)), getHintsFromExtends(extendNames.slice(1), parentConfigs));
};
/**
 * Returns a list of all the hints in a configuration, including
 * the ones inside the extends.
 */
exports.getHintsFromConfiguration = (userConfig) => {
    return Object.assign(Object.assign({}, getHintsFromExtends(userConfig.extends)), normalize_hints_1.default(userConfig.hints || {}));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWhpbnRzLWZyb20tY29uZmlndXJhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb25maWcvZ2V0LWhpbnRzLWZyb20tY29uZmlndXJhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVEQUErQztBQUMvQyw2REFBeUQ7QUFDekQsNkNBQWlEO0FBR2pELE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxVQUFrQixFQUFFLGdCQUEwQixFQUFFLEVBQUUsRUFBRTtJQUM1RSxJQUFJO1FBQ0EsSUFBSSxhQUFhLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ3BDLE9BQU8sRUFBRSxDQUFDO1NBQ2I7UUFFRCxNQUFNLGFBQWEsR0FBRyw0QkFBWSxDQUFDLFVBQVUsRUFBRSxvQkFBWSxDQUFDLGFBQWEsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUUxRix1Q0FDTyxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUMsVUFBVSxFQUFFLEdBQUcsYUFBYSxDQUFDLENBQUMsR0FDMUUseUJBQWMsQ0FBQyxhQUFhLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxFQUM5QztLQUNMO0lBQUMsT0FBTyxDQUFDLEVBQUUsMEJBQTBCLENBQUMsRUFBRSw4RUFBOEU7UUFDbkgsT0FBTyxFQUFFLENBQUM7S0FDYjtBQUNMLENBQUMsQ0FBQztBQUVGLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxXQUFzQixFQUFFLGdCQUEwQixFQUFFLEVBQU8sRUFBRTtJQUN0RixJQUFJLENBQUMsV0FBVyxJQUFJLFdBQVcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQzFDLE9BQU8sRUFBRSxDQUFDO0tBQ2I7SUFFRCxNQUFNLFVBQVUsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFbEMsdUNBQ08sa0JBQWtCLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxHQUM3QyxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxFQUM3RDtBQUNOLENBQUMsQ0FBQztBQUVGOzs7R0FHRztBQUNVLFFBQUEseUJBQXlCLEdBQUcsQ0FBQyxVQUFzQixFQUFxQixFQUFFO0lBQ25GLHVDQUNPLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsR0FDdkMseUJBQWMsQ0FBQyxVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxFQUMzQztBQUNOLENBQUMsQ0FBQyJ9