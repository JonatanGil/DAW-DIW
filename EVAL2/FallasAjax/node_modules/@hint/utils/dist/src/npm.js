"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const path = require("path");
const fs = require("fs");
const npmRegistryFetch = require("npm-registry-fetch");
const utils_debug_1 = require("@hint/utils-debug");
const utils_fs_1 = require("@hint/utils-fs");
const logger = require("./logging");
const packages_1 = require("./packages");
const has_yarnlock_1 = require("./has-yarnlock");
const debug = utils_debug_1.debug(__filename);
const install = (command) => {
    return new Promise((resolve, reject) => {
        const npmInstall = child_process_1.spawn(command, [], { shell: true, stdio: 'inherit' });
        npmInstall.on('error', (err) => {
            return reject(err);
        });
        npmInstall.on('exit', (code) => {
            if (code !== 0) {
                return reject();
            }
            return resolve(true);
        });
    });
};
/** Install the given packages. */
exports.installPackages = async (packages) => {
    /** Whether or not the package should be installed as devDependencies. */
    let isDev = false;
    /** Current working directory. */
    const currentWorkingDir = utils_fs_1.cwd();
    /** Whether or not the process is running in windows */
    const isWindows = process.platform === 'win32';
    if (packages.length === 0) {
        return Promise.resolve(true);
    }
    const hintLocalPath = path.join(currentWorkingDir, 'node_modules', 'hint', 'package.json');
    // Check if hint is installed locally.
    const global = !fs.existsSync(hintLocalPath); // eslint-disable-line no-sync
    /** package manager to install the packages. */
    const packageManagerChoice = (!global && await has_yarnlock_1.hasYarnLock(currentWorkingDir)) ? 'yarn' : 'npm';
    if (!global) {
        try {
            const packagePath = packages_1.findPackageRoot(currentWorkingDir);
            const jsonContent = utils_fs_1.loadJSONFile(path.join(packagePath, 'package.json'));
            // If `hint` is a devDependency, then set all packages as devDependencies.
            isDev = jsonContent.devDependencies && jsonContent.devDependencies.hasOwnProperty('hint');
        }
        catch (err) {
            // Even if `hint` is installed locally, package.json could not exist in the current working directory.
            isDev = false;
        }
    }
    const installCommand = {
        npm: `npm install${global ? ' --global' : ''}${isDev ? ' --save-dev' : ''}`,
        yarn: `yarn add${isDev ? ' --dev' : ''}`
    };
    const command = `${installCommand[packageManagerChoice]} ${packages.join(' ')}`;
    try {
        debug(`Running command ${command}`);
        logger.log('Installing packages...');
        await install(command);
        return true;
    }
    catch (err) {
        debug(err);
        /*
         * There was an error installing packages.
         * Show message to install packages manually (maybe permissions error?).
         */
        /* istanbul ignore next */
        logger.error(`
There was a problem installing packages.
Please try executing:
    ${!isWindows && global ? 'sudo ' : ''}${command}
            manually to install all the packages.`);
        return false;
    }
};
/** Filters the packages that `startsWith` `initTerm`. */
const filterPackages = (packages, initTerm) => {
    return packages.filter((pkg) => {
        return pkg.name.startsWith(initTerm);
    });
};
/** Get npm packages from the object returned for npmRegistryFetch.json. */
const getPackages = (result) => {
    return result.objects.map((obj) => {
        return obj.package;
    });
};
/** Generate a search query to search packages. */
const generateSearchQuery = (searchTerm, from, size = 100) => {
    return `/-/v1/search?text=${searchTerm}&size=${size}${from ? `&from=${from}` : ''}`;
};
/**
 * Searches all the packages in npm given `searchTerm`.
 */
exports.search = async (searchTerm) => {
    const result = (await npmRegistryFetch.json(generateSearchQuery(searchTerm)));
    let total = getPackages(result);
    while (result.total > total.length) {
        const r = (await npmRegistryFetch.json(generateSearchQuery(searchTerm, total.length)));
        total = total.concat(getPackages(r));
    }
    return total;
};
/** Get core packages from npm. */
exports.getOfficialPackages = async (type) => {
    const hints = await exports.search(`@hint/${type}`);
    /*
     * We need to filter the results because the search can
     * include other packages that doesn't start with `@hint/{type}`.
     */
    return filterPackages(hints, `@hint/${type}`);
};
/** Get external packages from npm. */
exports.getUnofficialPackages = async (type) => {
    const hints = await exports.search(`webhint-${type}`);
    /*
     * We need to filter the results because the search can
     * include other packages that doesn't start with `webhint-{type}`.
     */
    return filterPackages(hints, `webhint-${type}`);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnBtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL25wbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlEQUFzQztBQUN0Qyw2QkFBNkI7QUFDN0IseUJBQXlCO0FBRXpCLHVEQUF1RDtBQUV2RCxtREFBK0M7QUFDL0MsNkNBQW1EO0FBRW5ELG9DQUFvQztBQUNwQyx5Q0FBNkM7QUFDN0MsaURBQTZDO0FBRTdDLE1BQU0sS0FBSyxHQUFvQixtQkFBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBRTdDLE1BQU0sT0FBTyxHQUFHLENBQUMsT0FBZSxFQUFFLEVBQUU7SUFDaEMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUNuQyxNQUFNLFVBQVUsR0FBRyxxQkFBSyxDQUFDLE9BQU8sRUFBRSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO1FBRXpFLFVBQVUsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDM0IsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdkIsQ0FBQyxDQUFDLENBQUM7UUFFSCxVQUFVLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFO1lBQzNCLElBQUksSUFBSSxLQUFLLENBQUMsRUFBRTtnQkFDWixPQUFPLE1BQU0sRUFBRSxDQUFDO2FBQ25CO1lBRUQsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQztBQUVGLGtDQUFrQztBQUNyQixRQUFBLGVBQWUsR0FBRyxLQUFLLEVBQUUsUUFBa0IsRUFBb0IsRUFBRTtJQUMxRSx5RUFBeUU7SUFDekUsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ2xC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