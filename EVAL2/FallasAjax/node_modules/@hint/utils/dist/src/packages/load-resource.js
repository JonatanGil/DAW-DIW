"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const globby = require("globby");
const semver = require("semver");
const utils_fs_1 = require("@hint/utils-fs");
const utils_debug_1 = require("@hint/utils-debug");
const utils_string_1 = require("@hint/utils-string");
const is_full_package_name_1 = require("./is-full-package-name");
const load_package_1 = require("./load-package");
const load_hint_package_1 = require("./load-hint-package");
const require_package_1 = require("./require-package");
const has_multiple_resources_1 = require("./has-multiple-resources");
const to_absolute_paths_1 = require("../config/to-absolute-paths");
const enums_1 = require("./enums");
const resource_error_1 = require("./resource-error");
const debug = utils_debug_1.debug(__filename);
/** Cache of resource builders, indexex by resource Id. */
const resources = new Map();
const moduleNameRegex = /[^']*'([^']*)'/g;
/**
 * Validates if a given package can be used with the current `hint` version
 * by looking at its `peerDependencies`
 */
const isVersionValid = (resourcePath) => {
    try {
        const pkg = load_package_1.loadPackage(resourcePath);
        const hintPkg = load_hint_package_1.loadHintPackage();
        return semver.satisfies(hintPkg.version, pkg.peerDependencies.hint);
    }
    catch (e) {
        // We failed to load the package.json so it's a core resource
        debug(e);
        return true;
    }
};
/** Tries to load a module from `resourcePath`. */
exports.tryToLoadFrom = (resourcePath) => {
    // This is exported so it's easier to stub during tests
    let builder = null;
    /*
     * We could be loading a config file that points to a path (thus a JSON).
     * `require` will try to load `.js`, `.json`, `.node` so it will fail and
     * we have to manually do this
     */
    try {
        const resource = utils_fs_1.loadJSONFile(resourcePath);
        return resource;
    }
    catch (e) {
        debug(`${resourcePath} is not a JSON file, trying to load it normally`);
    }
    try {
        /*
         * The following link has more info on how `require` resolves modules:
         * http://nodejs.org/dist/latest-v8.x/docs/api/modules.html#modules_all_together
         */
        const resource = require_package_1.requirePackage(resourcePath);
        builder = resource.default || resource;
    }
    catch (e) {
        debug(`Can't require ${resourcePath}`);
        /* istanbul ignore else */
        if (e.code === 'MODULE_NOT_FOUND') {
            /*
             * This get the name of the missed module
             * e.g: Cannot find module 'iltorb'
             */
            const exec = moduleNameRegex.exec(e.message);
            const moduleName = exec ? exec[1] : null;
            /*
             * If the module not found is the same as the module
             * we are trying to load, then is ok.
             */
            if (!moduleName || moduleName === resourcePath) {
                return null;
            }
            const errorMessage = `Module ${moduleName} not found when loading ${resourcePath}`;
            // The resourcePath and the module not found are different.
            throw new resource_error_1.ResourceError(errorMessage, enums_1.ResourceErrorStatus.DependencyError);
        }
        throw new resource_error_1.ResourceError(e, enums_1.ResourceErrorStatus.Unknown);
    }
    return builder;
};
/**
 * Get a resource with the given `name` from a path
 * If that path contains a package with multiple resources
 * then get only the one with the given `name`.
 */
const getResource = (source, type, name) => {
    const resource = exports.tryToLoadFrom(source);
    if (!resource) {
        return null;
    }
    if (!has_multiple_resources_1.hasMultipleResources(resource, type)) {
        return resource;
    }
    for (const [key, value] of Object.entries(resource)) {
        if (key === name) {
            return value.default || value;
        }
    }
    return null;
};
// If we are using bundling with webpack we need to "hide" all the requires
const resolvePackage = (modulePath) => {
    let pkgPath;
    /* istanbul ignore if */
    if (process.env.webpack) { // eslint-disable-line no-process-env
        pkgPath = eval(`require.resolve("${modulePath}")`); // eslint-disable-line no-eval
    }
    else {
        pkgPath = require.resolve(modulePath);
    }
    return pkgPath;
};
/**
 * Looks inside the configurations looking for resources.
 */
const generateConfigPathsToResources = (configurations, name, type) => {
    return configurations.reduce((total, configuration) => {
        const basePackagePaths = is_full_package_name_1.isFullPackageName(configuration, enums_1.ResourceType.configuration) ?
            [''] :
            ['@hint/configuration-', 'webhint-configuration-'];
        let result = total;
        for (const basePackagePath of basePackagePaths) {
            const packageName = `${basePackagePath}${configuration}`;
            try {
                const packagePath = path.dirname(resolvePackage(packageName));
                const resourceGlob = is_full_package_name_1.isFullPackageName(name, type) ?
                    name :
                    `{@hint/,webhint-}${type}-${name}`;
                const resourcePackages = globby.sync(`node_modules/${resourceGlob}/package.json`, { absolute: true, cwd: packagePath }).map((pkg) => {
                    return path.dirname(pkg);
                });
                result = result.concat(resourcePackages);
            }
            catch (err) {
                debug(`Package ${packageName} not found`);
            }
        }
        return result;
    }, []);
};
/**
 * Accepts:
 * * Relative paths (./foo)
 * * Unix-style absolute paths (/foo)
 * * Windows-style absolute paths (c:/foo)
 */
const isFilesystemPath = (filename) => {
    return filename[0] === '.' || filename[0] === '/' || filename[1] === ':';
};
/**
 * Looks for a hint resource with the given `name` and tries to load it.
 * If no valid resource is found, it throws an `Error`.
 *
 * By default, the priorities are:
 *
 * 1. core resource
 * 2. `@hint/` scoped package
 * 3. `webhint-` prefixed package
 * 4. external hints
 *
 */
exports.loadResource = (name, type, configurations = [], verifyVersion = false) => {
    debug(`Searching ${name}â€¦`);
    const isSource = isFilesystemPath(name) && fs.existsSync(name); // eslint-disable-line no-sync
    const isPackage = is_full_package_name_1.isFullPackageName(name, type);
    const nameParts = name.split('/');
    let scope = '';
    let unscopedNameParts = nameParts;
    if (isPackage && nameParts[0].startsWith('@')) {
        scope = `${nameParts[0]}/`;
        unscopedNameParts = nameParts.slice(1);
    }
    const packageName = `${scope}${unscopedNameParts[0]}`;
    const resourceName = isSource ?
        name : unscopedNameParts[1] || packageName;
    const key = isPackage || isSource ?
        name :
        `${type}-${name}`;
    // When we check the version we ignore if there was a previous version loaded
    if (resources.has(key) && !verifyVersion) {
        return resources.get(key);
    }
    const configPathsToResources = generateConfigPathsToResources(configurations, packageName, type);
    const currentProcessDir = utils_fs_1.cwd();
    /*
     * We can't use the key for the Official packages neither for the Third party ones because
     * in case that we have a multi-hints packages, the key for the cache has to contain
     * the key for the specific hint, but we need to load the package that contains the hint.
     * i.e.
     * if we want to load the hint `hint-typescript-config/is-valid` the key for the cache
     * has to be `hint-typescript-config/is-valid`.
     * But we need to load the package `hint-typescript-config`.
     */
    let sources;
    if (isSource) {
        sources = [path.resolve(currentProcessDir, name)]; // If the name is direct path to the source we should only check that.
    }
    else if (isPackage) {
        sources = [packageName].concat(configPathsToResources); // If the name is a full package name we should only check that, but look for it in config paths as well.
    }
    else {
        sources = [
            `@hint/${type}-${packageName}`,
            `webhint-${type}-${packageName}`,
            path.normalize(currentProcessDir) // External hints.
        ].concat(configPathsToResources);
    }
    let resource;
    let loadedSource;
    let isValid = true;
    sources.some((source) => {
        const res = getResource(source, type, resourceName);
        if (res && isSource) {
            isValid = true;
            resource = res;
            loadedSource = source;
            return true;
        }
        if (res && !isSource) { // Paths to sources might not have packages and versioning doesn't apply
            debug(`${name} found in ${source}`);
            if (source === currentProcessDir) {
                try {
                    const packageConfig = load_package_1.loadPackage(source);
                    if (!utils_string_1.normalizeIncludes(packageConfig.name, packageName)) {
                        return false;
                    }
                }
                catch (e) {
                    return false;
                }
            }
            if (verifyVersion && !isVersionValid(source)) {
                debug(`Resource ${name} isn't compatible with current hint version`);
                isValid = false;
                return false;
            }
            isValid = true;
            resource = res;
            loadedSource = source;
        }
        return resource;
    });
    if (!isValid) {
        throw new resource_error_1.ResourceError(`Resource ${name} isn't compatible with current hint version`, enums_1.ResourceErrorStatus.NotCompatible);
    }
    if (!resource) {
        debug(`Resource ${name} not found`);
        throw new resource_error_1.ResourceError(`Resource ${name} not found`, enums_1.ResourceErrorStatus.NotFound);
    }
    if (type === enums_1.ResourceType.configuration) {
        resource = to_absolute_paths_1.toAbsolutePaths(resource, resolvePackage(loadedSource));
    }
    resources.set(key, resource);
    return resource;
};
//# sourceMappingURL=data:application/json;base64,