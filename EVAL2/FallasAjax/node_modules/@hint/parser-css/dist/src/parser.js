"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const safe = require('postcss-safe-parser');
const postcss = require("postcss");
const logger = require("@hint/utils/dist/src/logging");
const utils_string_1 = require("@hint/utils-string");
const types_1 = require("hint/dist/src/lib/types");
class CSSParser extends types_1.Parser {
    constructor(engine) {
        super(engine, 'css');
        engine.on('fetch::end::css', this.parseCSS.bind(this));
        engine.on('element::style', this.parseStyleTag.bind(this));
    }
    async emitCSS(code, resource, element) {
        try {
            await this.engine.emitAsync(`parse::start::css`, { resource });
            const result = await postcss().process(code, { from: resource, parser: safe });
            const ast = result.root; // always defined even for '' (typings error?)
            await this.engine.emitAsync(`parse::end::css`, {
                ast,
                code,
                element,
                resource
            });
        }
        catch (err) /* istanbul ignore next */ {
            logger.error(`Error parsing CSS code: ${code} - ${err}`);
        }
    }
    async parseCSS(fetchEnd) {
        const code = fetchEnd.response.body.content;
        const resource = fetchEnd.resource;
        await this.emitCSS(code, resource, null);
    }
    isCSSType(element) {
        const type = utils_string_1.normalizeString(element.getAttribute('type'));
        /*
         * From: https://html.spec.whatwg.org/multipage/semantics.html#update-a-style-block
         *
         * If element's type attribute is present and its value is neither
         * the empty string nor an ASCII case-insensitive match for
         * "text/css", then return.
         */
        return !type || type === 'text/css';
    }
    async parseStyleTag({ element, resource }) {
        if (!this.isCSSType(element)) {
            // Ignore if it is not CSS.
            return;
        }
        await this.emitCSS(element.innerHTML, resource, element);
    }
}
exports.default = CSSParser;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3BhcnNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBRTVDLG1DQUFtQztBQUVuQyx1REFBdUQ7QUFDdkQscURBQXFEO0FBRXJELG1EQUF5RTtBQU16RSxNQUFxQixTQUFVLFNBQVEsY0FBbUI7SUFDdEQsWUFBbUIsTUFBMkI7UUFDMUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUVyQixNQUFNLENBQUMsRUFBRSxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDdkQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFTyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQVksRUFBRSxRQUFnQixFQUFFLE9BQTJCO1FBRTdFLElBQUk7WUFDQSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLG1CQUFtQixFQUFFLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUUvRCxNQUFNLE1BQU0sR0FBRyxNQUFNLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQy9FLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxJQUFLLENBQUMsQ0FBQyw4Q0FBOEM7WUFFeEUsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsRUFBRTtnQkFDM0MsR0FBRztnQkFDSCxJQUFJO2dCQUNKLE9BQU87Z0JBQ1AsUUFBUTthQUNYLENBQUMsQ0FBQztTQUVOO1FBQUMsT0FBTyxHQUFHLEVBQUUsMEJBQTBCLENBQUM7WUFDckMsTUFBTSxDQUFDLEtBQUssQ0FBQywyQkFBMkIsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDLENBQUM7U0FDNUQ7SUFDTCxDQUFDO0lBRU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFrQjtRQUNyQyxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDNUMsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQztRQUVuQyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRU8sU0FBUyxDQUFDLE9BQW9CO1FBQ2xDLE1BQU0sSUFBSSxHQUFHLDhCQUFlLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBRTNEOzs7Ozs7V0FNRztRQUNILE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxLQUFLLFVBQVUsQ0FBQztJQUN4QyxDQUFDO0lBRU8sS0FBSyxDQUFDLGFBQWEsQ0FBQyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQWdCO1FBRTNELElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQzFCLDJCQUEyQjtZQUMzQixPQUFPO1NBQ1Y7UUFFRCxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDN0QsQ0FBQztDQUNKO0FBekRELDRCQXlEQyJ9